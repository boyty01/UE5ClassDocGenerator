[{"properties":[{"name":"FaceId;","flags":["",""],"type":"int"},{"name":"HairId;","flags":["",""],"type":"int"},{"name":"ShirtId;","flags":["",""],"type":"int"},{"name":"LegsId;","flags":["",""],"type":"int"},{"name":"FeetId;","flags":["",""],"type":"int"},{"name":"Accessory1;","flags":["",""],"type":"int"},{"name":"Accessory2;","flags":["",""],"type":"int"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"MovementMode","flags":["Config"," EditAnywhere"," BlueprintReadWrite",""],"type":"uint8"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"OnTriggerAudioPulse;","flags":["BlueprintAssignable"," Category = \"Level Events\"",""],"type":"FTriggerAudioPulse"},{"name":"AudioPulseMaterialCollection;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Audio Pulse\"",""],"type":"UMaterialParameterCollection*"},{"name":"CurrentRadius;","flags":["BlueprintReadOnly"," Category = \"Audio Pulse\"",""],"type":"float"},{"name":"AudioWaveMaxRadius{","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Audio Pulse\"",""],"type":"float"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"CrateType;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Default\"",""],"type":"TEnumAsByte<ECrateType>"},{"name":"DataLogID;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Default\""," meta=(EditCondition = \"CrateType == ECrateType::DataLogCrate\"","","",["(EditCondition = \"CrateType == ECrateType::DataLogCrate\"","BlueprintReadWrite, EditAnywhere, Category = \"Default\", meta="]],"type":"int"},{"name":"StemID;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Default\""," meta = (EditCondition = \"CrateType == ECrateType::AudioStemCrate\"","","",["(EditCondition = \"CrateType == ECrateType::AudioStemCrate\"","BlueprintReadWrite, EditAnywhere, Category = \"Default\", meta = "]],"type":"int"},{"name":"ItemToSpawn;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Default\""," meta = (EditCondition = \"CrateType == ECrateType::UpgradeCrate\"","","",["(EditCondition = \"CrateType == ECrateType::UpgradeCrate\"","BlueprintReadWrite, EditAnywhere, Category = \"Default\", meta = "]],"type":"TSubclassOf<AActor>"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"AudioPulseController;","flags":["BlueprintReadWrite"," EditAnywhere"," Category =\"Audio Pulse Controller\"",""],"type":"ADMT_AudioPulseController*"},{"name":"Mesh;","flags":["BlueprintReadWrite"," VisibleAnywhere"," Category = \"Components\"",""],"type":"UStaticMeshComponent*"},{"name":"bShowTooltip{","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Tooltips\"",""],"type":"bool"}],"functions":[]},{"properties":[{"name":"OnDoorLockStateChanged;","flags":["BlueprintAssignable"," BlueprintCallable",""],"type":"FOnDoorLockStateChanged"}],"functions":[]},{"properties":[{"name":"NiagaraSystemComponent;","flags":["VisibleAnywhere"," Category=\"Components\"",""],"type":"UNiagaraComponent*"},{"name":"UMaterial*>","flags":["EditAnywhere"," BlueprintReadOnly"," Category =\"Materials\"",""],"type":"TMap<FName,"},{"name":"UMaterial*>","flags":["EditAnywhere"," BlueprintReadOnly"," Category =\"Materials\"",""],"type":"TMap<FName,"},{"name":"bAlwaysUsePerformanceInVR;","flags":["EditAnywhere"," BlueprintReadWrite"," Category = \"Materials\"",""],"type":"bool"},{"name":"bOverrideQuality;","flags":["EditAnywhere"," BlueprintReadWrite"," Category = \"Materials\"",""],"type":"bool"},{"name":"OverrideQuality;","flags":["EditAnywhere"," BlueprintReadOnly"," Category = \"Materials\""," meta =(EditCondition=bOverrideQuality","","",["(EditCondition=bOverrideQuality","EditAnywhere, BlueprintReadOnly, Category = \"Materials\", meta ="]],"type":"TEnumAsByte<EEmitterQualitySetting>"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"NightTransitionPct{","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Set Scene\"",""],"type":"float"}],"functions":[]},{"properties":[{"name":"OnAIStateChanged;","flags":["BlueprintAssignable"," BlueprintCallable",""],"type":"FOnAIStateChanged"}],"functions":[]},{"properties":[{"name":"Door2OpenTarget;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"default\""," Meta = (MakeEditWidget = true","","",["(MakeEditWidget = true","BlueprintReadWrite, EditAnywhere, Category = \"default\", Meta = "]],"type":"FVector"},{"name":"Door2OpenTargetRelative;","flags":["",""],"type":"FVector"},{"name":"Door2CloseTarget;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"default\""," Meta = (MakeEditWidget = true","","",["(MakeEditWidget = true","BlueprintReadWrite, EditAnywhere, Category = \"default\", Meta = "]],"type":"FVector"},{"name":"Door2Mesh;","flags":["BlueprintReadOnly"," VisibleAnywhere"," Category = \"Components\"",""],"type":"UStaticMeshComponent*"},{"name":"ForceOrigin2Point;","flags":["",""],"type":"FVector"}],"functions":[]},{"properties":[{"name":"OnAlertStartDelegate;","flags":["BlueprintAssignable"," Category = \"Delegates\"",""],"type":"FOnAlertStartDelegate"},{"name":"OnAlertEndDelegate;","flags":["BlueprintAssignable"," Category = \"Delegates\"",""],"type":"FOnAlertEndDelegate"},{"name":"OnFoundPlayerDelegate;","flags":["BlueprintAssignable"," Category = \"Delegates\"",""],"type":"FOnFoundPlayerDelegate"},{"name":"OnLostPlayerDelegate;","flags":["BlueprintAssignable"," Category = \"Delegates\"",""],"type":"FOnLostPlayerDelegate"},{"name":"SightConfig;","flags":["VisibleAnywhere"," BlueprintReadWrite"," Category = \"Perception\"",""],"type":"UAISenseConfig_Sight*"},{"name":"HearingConfig;","flags":["VisibleAnywhere"," BlueprintReadWrite"," Category = \"Perception\"",""],"type":"UAISenseConfig_Hearing*"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"Helm{","flags":["BlueprintReadWrite",""],"type":"bool"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"VRMovementMode;","flags":["Config",""],"type":"TEnumAsByte<EVRLocomotionMode>"},{"name":"VRTurnMode;","flags":["Config",""],"type":"TEnumAsByte<EVRTurnMode>"},{"name":"TraceTeleport(FVector&","flags":["BlueprintReadWrite"," VisibleAnywhere"," Category = \"Components\"",";","UNiagaraComponent* TeleportArcFX;","","BlueprintReadWrite"," EditAnywhere"," Category = \"Components\"",";","UStaticMeshComponent* TeleportDesinationMarker;","","/* Traces the teleport location from projected angle using physics */","UFUNCTION(BlueprintCallable"," Category = \"VR Movement\"","",["(BlueprintCallable, Category = \"VR Movement\"","UFUNCTION"]],"type":"bool"},{"name":"SnapValue{45.f};","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"VR Movement\"",""],"type":"float"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"OnWake;","flags":["BlueprintAssignable"," BlueprintCallable",""],"type":"FOnWake"},{"name":"OnFactionUpdated;","flags":["BlueprintAssignable"," BlueprintCallable",""],"type":"FOnFactionUpdated"}],"functions":[]},{"properties":[{"name":"CameraMain;","flags":["BlueprintReadWrite"," VisibleAnywhere",""],"type":"UCameraComponent*"},{"name":"HandTargetComponent0;","flags":["BlueprintReadWrite"," VisibleAnywhere",""],"type":"USceneComponent*"}],"functions":[]},{"properties":[{"name":"SpeechComponent;","flags":["BlueprintReadWrite"," VisibleAnywhere",""],"type":"UAudioComponent*"}],"functions":[]},{"properties":[{"name":"MaxLineDisplayTime;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"float"},{"name":"SubtitleCue;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"TArray<FSubtitleCue>"},{"name":"CurrentSubtitleIndex;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"int"},{"name":"bActiveSubtitles;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"bool"},{"name":"LatestSubtitleInitialDisplayTime;","flags":["",""],"type":"float"},{"name":"SubtitleCueStartTime;","flags":["",""],"type":"float"},{"name":"SubtitleTextRender;","flags":["BlueprintReadWrite"," VisibleAnywhere",""],"type":"UTextRenderComponent*"},{"name":"SubtitleOffset;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"FVector"},{"name":"SubtitleRenderDefaultText;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"FText"}],"functions":[]},{"properties":[{"name":"OnNewDataLog;","flags":["BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"",""],"type":"FWOBOnNewDataLog2D"},{"name":"OnHelmCollected;","flags":["BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"",""],"type":"FWOBOnHelmCollected2D"}],"functions":[]},{"properties":[{"name":"OnNewDataLog;","flags":["BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"",""],"type":"FWOBOnNewDataLog"},{"name":"OnHelmCollected;","flags":["BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"",""],"type":"FWOBOnHelmCollected"}],"functions":[]},{"properties":[{"name":"InitialHealth;","flags":["BlueprintReadWrite",""],"type":"int"},{"name":"MaxHealth;","flags":["BlueprintReadWrite",""],"type":"int"},{"name":"<TSubclassOf<UDamageType>,int>","flags":["BlueprintReadWrite",""],"type":"TMap"},{"name":"ParryRating;","flags":["BlueprintReadWrite",""],"type":"int"},{"name":"DodgeRating;","flags":["BlueprintReadWrite",""],"type":"int"},{"name":"CharacterLevel;","flags":["BlueprintReadWrite",""],"type":"int"},{"name":"Immunities;","flags":["BlueprintReadWrite",""],"type":"TArray<TSubclassOf<UDamageType>>"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"bIsTracing;","flags":["",""],"type":"bool"},{"name":"TeleportArc;","flags":["BlueprintReadOnly",""],"type":"UNiagaraComponent*"},{"name":"DestinationMarker;","flags":["BlueprintReadOnly",""],"type":"UNiagaraComponent*"},{"name":"ProjectileActor;","flags":["BlueprintReadOnly",""],"type":"AActor*"},{"name":"TraceOriginComponent;","flags":["BlueprintReadOnly",""],"type":"USkeletalMeshComponent*"},{"name":"ProjectileVelocity;","flags":["BlueprintReadOnly",""],"type":"FVector"}],"functions":[]},{"properties":[{"name":"AlbumTrackMediaFiles;","flags":["EditAnywhere"," BlueprintReadWrite"," Category = \"Album Track files\"",""],"type":"TArray<USoundBase*>"},{"name":"StemPreviewTime{","flags":["EditAnywhere"," BlueprintReadWrite"," Category = \"Stem Playback\"",""],"type":"float"}],"functions":[]},{"properties":[{"name":"Footsteps_Rock;","flags":["BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"Footsteps_Water;","flags":["BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"Footsteps_Grass;","flags":["BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"Footsteps_TallGrass;","flags":["BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"Footsteps_Snow;","flags":["BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"Footsteps_Metal;","flags":["BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"FootstepInterval{1.0f};","flags":["BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"float"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"MusicFile;","flags":["",""],"type":"USoundBase*"},{"name":"bIsMusicPlaying;","flags":["",""],"type":"bool"},{"name":"bIsLogPlaying;","flags":["",""],"type":"bool"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"OnAccountRegistrationFailed;","flags":["BlueprintAssignable",""],"type":"FAccountRegistrationFailed"},{"name":"AccountRegistrationFailed(FString&","flags":["BlueprintAssignable",";","FAccountRegistrationSuccess OnAccountRegistrationSuccess;","","UFUNCTION(","",["(","UFUNCTION"]],"type":"void"},{"name":"OnAccountLoginFail;","flags":["BlueprintAssignable",""],"type":"FAccountLoginFail"},{"name":"OnAccountLoginSuccess;","flags":["BlueprintAssignable",""],"type":"FAccountLoginSuccess"},{"name":"OnAccountLogout;","flags":["BlueprintAssignable",""],"type":"FAccountLoggedOut"},{"name":"OnCharacterDataUpdated;","flags":["BlueprintAssignable",""],"type":"FCharacterDataUpdated"},{"name":"OnCharacterDataRequestFailed;","flags":["BlueprintAssignable",""],"type":"FCharacterDataRequestFailed"},{"name":"OnCharacterCreated;","flags":["BlueprintAssignable",""],"type":"FCharacterCreated"},{"name":"OnCharacterCreationFailed;","flags":[""," "],"type":"FCharacterCreationFailed"},{"name":"OnUserBlockedUser;","flags":["",""],"type":"FUserBlockedUser"},{"name":"OnUserBlockRequestFailed;","flags":["",""],"type":"FUserBlockRequestFail"},{"name":"ApiAuthToken","flags":["Config",";","FString ApiUrl;","","","/*","* This is the api jwt token that gets generated by the server on account login. It can be set with the public setter"," but cannot be gotten outside of this class"," since","* nothing other than this api should need it.","*/","",""],"type":"FString"}],"functions":[]},{"properties":[{"name":"TeamAttitudes;","flags":["Category = \"Artificial Intelligence\""," EditAnywhere"," BlueprintReadOnly"," Config",""],"type":"TArray<FTeamAttitude>"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"TSubclassOf<AActor>,","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"TMap<class"},{"name":"bUncategorisedIfNotDefined;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"bool"},{"name":"FolderConflictRule;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"TEnumAsByte<EBatchSortFolderRule>"}],"functions":[]},{"properties":[{"name":"Settings;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"FBatchSortConfig"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"Success;","flags":["BlueprintAssignable",""],"type":"FGotSteamStats"},{"name":"Failed;","flags":["BlueprintAssignable",""],"type":"FGotSteamStats"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"SocketManager;","flags":["",""],"type":"UDMT_ServerSocketManager*"},{"name":"bAllowNewPlayerConnections;","flags":["",""],"type":"bool"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"OnEmitterQualityChanged;","flags":["BlueprintAssignable",""],"type":"FOnEmitterQualityChanged"},{"name":"OnStereoLayerTypeChanged;","flags":["BlueprintAssignable",""],"type":"FOnStereoLayerTypeChanged"},{"name":"OnHeadBobSettingChanged;","flags":["BlueprintAssignable",""],"type":"FOnHeadBobSettingChanged"},{"name":"OnHUDWeatherEffectsChanged;","flags":["BlueprintAssignable",""],"type":"FOnHUDWeatherEffectsChanged"}],"functions":[]},{"properties":[{"name":"MovementMode;","flags":["EditAnywhere"," BlueprintReadWrite"," Config",""],"type":"uint8"},{"name":"TurnMode;","flags":["EditAnywhere"," BlueprintReadWrite"," Config",""],"type":"uint8"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"GameSave;","flags":["",""],"type":"UWOB_SaveGameSettings*"},{"name":"bool>","flags":["",""],"type":"TMap<int,"},{"name":"bool>","flags":["",""],"type":"TMap<int,"},{"name":"bool>","flags":["",""],"type":"TMap<int,"},{"name":"UUserWidget>","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Loading Screen\"",""],"type":"TSubclassOf<class"},{"name":"LoadingScreenTextureVR;","flags":["BlueprintReadWrite"," EditAnywhere"," Category = \"Loading Screen\"",""],"type":"UTexture*"}],"functions":[]},{"properties":[{"name":"OnAnyKeyPressed;","flags":["BlueprintAssignable",""],"type":"FOnAnyKeyPressed"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"FirstRun;","flags":["",""],"type":"int"},{"name":"LevelCompleteState;","flags":["",""],"type":"TMap<int,bool>"},{"name":"bool>","flags":["",""],"type":"TMap<int,"},{"name":"bool>","flags":["",""],"type":"TMap<int,"}],"functions":[]},{"properties":[{"name":"GamepadKey;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"FKey"},{"name":"Xbox;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"FText"},{"name":"DualShock;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"FText"},{"name":"Switch;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"FText"},{"name":"SuperNintendo;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"FText"}],"functions":[]},{"properties":[{"name":"Mappings;","flags":["BlueprintReadOnly"," Category = \"Custom Input Mappings\"",""],"type":"TArray<FEnhancedActionKeyMapping>"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"ID;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"int"},{"name":"AlertText;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"FString"},{"name":"Title;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"FString"},{"name":"SoundFile;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"USoundCue*"},{"name":"Transcript;","flags":["BlueprintReadWrite"," EditAnywhere"," meta = (MultiLine = \"true\"","","",["(MultiLine = \"true\"","BlueprintReadWrite, EditAnywhere, meta = "]],"type":"FString"},{"name":"TranscriptColor;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"FSlateColor"},{"name":"TranscriptShowTime;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"float"},{"name":"fIsTrackStem;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"bool"},{"name":"StemType;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"TEnumAsByte<EStemType>"},{"name":"AlbumTrack;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"TEnumAsByte<EAlbumTrack>"},{"name":"NextLog;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"int"},{"name":"bAllowSkip;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"bool"}],"functions":[]},{"properties":[{"name":"OnStatsDownloaded;","flags":["BlueprintAssignable",""],"type":"FOnStatsDownloaded"}],"functions":[]},{"properties":[{"name":"Attitude;","flags":["BlueprintReadWrite"," EditAnywhere",""],"type":"TArray<TEnumAsByte<ETeamAttitude::Type>>"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"OnInputDeviceChanged;","flags":["BlueprintAssignable",""],"type":"FOnInputDeviceChanged"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"FaceId;","flags":[null,"",""],"type":"int"},{"name":"HairId;","flags":[null,"",""],"type":"int"},{"name":"ShirtId;","flags":[null,"",""],"type":"int"},{"name":"LegsId;","flags":[null,"",""],"type":"int"},{"name":"FeetId;","flags":[null,"",""],"type":"int"},{"name":"Accessory1;","flags":[null,"",""],"type":"int"},{"name":"Accessory2;","flags":[null,"",""],"type":"int"}],"functions":[]},{"name":"*","properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"name":"*","properties":[{"name":"MovementMode","flags":[null,"Config"," EditAnywhere"," BlueprintReadWrite",""],"type":"uint8"}],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"*","properties":[{"name":"OnAIStateChanged;","flags":[null,"BlueprintAssignable"," BlueprintCallable",""],"type":"FOnAIStateChanged"}],"functions":[]},{"name":"*","properties":[{"name":"OnAlertStartDelegate;","flags":[null,"BlueprintAssignable"," Category = \"Delegates\"",""],"type":"FOnAlertStartDelegate"},{"name":"OnAlertEndDelegate;","flags":[null,"BlueprintAssignable"," Category = \"Delegates\"",""],"type":"FOnAlertEndDelegate"},{"name":"OnFoundPlayerDelegate;","flags":[null,"BlueprintAssignable"," Category = \"Delegates\"",""],"type":"FOnFoundPlayerDelegate"},{"name":"OnLostPlayerDelegate;","flags":[null,"BlueprintAssignable"," Category = \"Delegates\"",""],"type":"FOnLostPlayerDelegate"},{"name":"SightConfig;","flags":[null,"VisibleAnywhere"," BlueprintReadWrite"," Category = \"Perception\"",""],"type":"UAISenseConfig_Sight*"},{"name":"HearingConfig;","flags":[null,"VisibleAnywhere"," BlueprintReadWrite"," Category = \"Perception\"",""],"type":"UAISenseConfig_Hearing*"}],"functions":[]},{"name":"/* Max speed the controlled pawn can move when in idle state /* Max speed the controlled pawn can move when in an alert state /* Max speed the controlled pawn can move when in an attack state controlled pawn and the player pawn are active.attack behavior./* The world location of the last triggered stimuli event./* The length of time, in seconds, the AI should stay in alert state when it cant find a player before resetting to idle.and within MaxDetectionDistance. This should always be less than MaxDetectionDistance.Change the sight config's max range to affect this value.the player is until it leaves line of sight or goes outside the MaxDetectionDistance.the alert level is evaluated. *","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"*","properties":[{"name":"OnAccountRegistrationFailed;","flags":[null,"BlueprintAssignable",""],"type":"FAccountRegistrationFailed","description":"*/* Account registration "},{"name":"AccountRegistrationFailed(FString&","flags":[null,"BlueprintAssignable",";","FAccountRegistrationSuccess OnAccountRegistrationSuccess;","","UFUNCTION(","",["(","UFUNCTION"]],"type":"void"},{"name":"OnAccountLoginFail;","flags":[null,"BlueprintAssignable",""],"type":"FAccountLoginFail","description":"/*Account Login "},{"name":"OnAccountLoginSuccess;","flags":[null,"BlueprintAssignable",""],"type":"FAccountLoginSuccess"},{"name":"OnAccountLogout;","flags":[null,"BlueprintAssignable",""],"type":"FAccountLoggedOut","description":"/* Account Logout"},{"name":"OnCharacterDataUpdated;","flags":[null,"BlueprintAssignable",""],"type":"FCharacterDataUpdated","description":"/* Character Data "},{"name":"OnCharacterDataRequestFailed;","flags":[null,"BlueprintAssignable",""],"type":"FCharacterDataRequestFailed"},{"name":"OnCharacterCreated;","flags":[null,"BlueprintAssignable",""],"type":"FCharacterCreated"},{"name":"OnCharacterCreationFailed;","flags":[null,""," "],"type":"FCharacterCreationFailed"},{"name":"OnUserBlockedUser;","flags":[null,"",""],"type":"FUserBlockedUser","description":"/* Auth Token Setter/* User blocked another user, event "},{"name":"OnUserBlockRequestFailed;","flags":[null,"",""],"type":"FUserBlockRequestFail"},{"name":"ApiAuthToken","flags":[null,"Config",";","FString ApiUrl;","","","/*","* This is the api jwt token that gets generated by the server on account login. It can be set with the public setter"," but cannot be gotten outside of this class"," since","* nothing other than this api should need it.","*/","",""],"type":"FString","description":"**"}],"functions":[]},{"name":"/*API Handled responses *","properties":[{"name":"OnTriggerAudioPulse;","flags":[null,"BlueprintAssignable"," Category = \"Level Events\"",""],"type":"FTriggerAudioPulse"},{"name":"AudioPulseMaterialCollection;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Audio Pulse\"",""],"type":"UMaterialParameterCollection*"},{"name":"CurrentRadius;","flags":[null,"BlueprintReadOnly"," Category = \"Audio Pulse\"",""],"type":"float"},{"name":"AudioWaveMaxRadius{","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Audio Pulse\"",""],"type":"float"}],"functions":[]},{"name":"","properties":[{"name":"AudioPulseController;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category =\"Audio Pulse Controller\"",""],"type":"ADMT_AudioPulseController*"},{"name":"Mesh;","flags":[null,"BlueprintReadWrite"," VisibleAnywhere"," Category = \"Components\"",""],"type":"UStaticMeshComponent*"},{"name":"bShowTooltip{","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Tooltips\"",""],"type":"bool"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"name":"","properties":[{"name":"NightTransitionPct{","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Set Scene\"",""],"type":"float","description":"This is only applicable when transitioning over time. "}],"functions":[]},{"name":"the 'moon' is directly opposite, under the landscape. *","properties":[{"name":"Success;","flags":[null,"BlueprintAssignable",""],"type":"FGotSteamStats"},{"name":"Failed;","flags":[null,"BlueprintAssignable",""],"type":"FGotSteamStats"}],"functions":[]},{"properties":[],"functions":[]},{"name":"","properties":[{"name":"CrateType;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Default\"",""],"type":"TEnumAsByte<ECrateType>"},{"name":"DataLogID;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Default\""," meta=(EditCondition = \"CrateType == ECrateType::DataLogCrate\"","","",["(EditCondition = \"CrateType == ECrateType::DataLogCrate\"","BlueprintReadWrite, EditAnywhere, Category = \"Default\", meta="]],"type":"int"},{"name":"StemID;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Default\""," meta = (EditCondition = \"CrateType == ECrateType::AudioStemCrate\"","","",["(EditCondition = \"CrateType == ECrateType::AudioStemCrate\"","BlueprintReadWrite, EditAnywhere, Category = \"Default\", meta = "]],"type":"int"},{"name":"ItemToSpawn;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Default\""," meta = (EditCondition = \"CrateType == ECrateType::UpgradeCrate\"","","",["(EditCondition = \"CrateType == ECrateType::UpgradeCrate\"","BlueprintReadWrite, EditAnywhere, Category = \"Default\", meta = "]],"type":"TSubclassOf<AActor>"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"TSubclassOf<AActor>,","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"TMap<class"},{"name":"bUncategorisedIfNotDefined;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"bool"},{"name":"FolderConflictRule;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"TEnumAsByte<EBatchSortFolderRule>","description":"*"}],"functions":[]},{"name":"","properties":[{"name":"Settings;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"FBatchSortConfig"}],"functions":[]},{"name":"*","properties":[{"name":"TeamAttitudes;","flags":[null,"Category = \"Artificial Intelligence\""," EditAnywhere"," BlueprintReadOnly"," Config",""],"type":"TArray<FTeamAttitude>"}],"functions":[]},{"properties":[],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"/* Save and apply all volume levels to the settings save game instance. Saves settings to savegame transitively. /*Gets all volume channel levels from the save state. *","properties":[],"functions":[]},{"name":"*","properties":[{"name":"Door2OpenTarget;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"default\""," Meta = (MakeEditWidget = true","","",["(MakeEditWidget = true","BlueprintReadWrite, EditAnywhere, Category = \"default\", Meta = "]],"type":"FVector","description":"/* Marker for where the door should rest when fully opened. "},{"name":"Door2OpenTargetRelative;","flags":[null,"",""],"type":"FVector"},{"name":"Door2CloseTarget;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"default\""," Meta = (MakeEditWidget = true","","",["(MakeEditWidget = true","BlueprintReadWrite, EditAnywhere, Category = \"default\", Meta = "]],"type":"FVector"},{"name":"Door2Mesh;","flags":[null,"BlueprintReadOnly"," VisibleAnywhere"," Category = \"Components\"",""],"type":"UStaticMeshComponent*"},{"name":"ForceOrigin2Point;","flags":[null,"",""],"type":"FVector"}],"functions":[]},{"name":"","properties":[{"name":"NiagaraSystemComponent;","flags":[null,"VisibleAnywhere"," Category=\"Components\"",""],"type":"UNiagaraComponent*"},{"name":"UMaterial*>","flags":[null,"EditAnywhere"," BlueprintReadOnly"," Category =\"Materials\"",""],"type":"TMap<FName,"},{"name":"UMaterial*>","flags":[null,"EditAnywhere"," BlueprintReadOnly"," Category =\"Materials\"",""],"type":"TMap<FName,"},{"name":"bAlwaysUsePerformanceInVR;","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Category = \"Materials\"",""],"type":"bool"},{"name":"bOverrideQuality;","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Category = \"Materials\"",""],"type":"bool"},{"name":"OverrideQuality;","flags":[null,"EditAnywhere"," BlueprintReadOnly"," Category = \"Materials\""," meta =(EditCondition=bOverrideQuality","","",["(EditCondition=bOverrideQuality","EditAnywhere, BlueprintReadOnly, Category = \"Materials\", meta ="]],"type":"TEnumAsByte<EEmitterQualitySetting>"}],"functions":[]},{"name":"*","properties":[{"name":"SocketManager;","flags":[null,"",""],"type":"UDMT_ServerSocketManager*","description":"The backend will run validation checks and will instigate spawning the users character if validation passes. Otherwise it will send a ban/kick message./* Replicate the block to the associated users. /*Pointer ref to the socket manager object "},{"name":"bAllowNewPlayerConnections;","flags":[null,"",""],"type":"bool","description":"/*Attempt to open the websocket connection to the backend /* Bound to the websocket PlayerBanned event. Invokes action of searching for & kicking the player when a ban notification is received from the backend. /* Handle websocket connection failure. Flags the servers state to disallow new player connections but does not remove existing players. is called when the Socket Managers reconnection attempts grace-period times out. /* Must be true for PostLogin to allow spawning and possession of new avatars. "}],"functions":[]},{"name":"/* search for a player controller by the username and invoke destroying it & its associated actors /* Destroy the given controller and its associated actors /* Handle what to do when character data is retrieved *","properties":[{"name":"MovementMode;","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Config",""],"type":"uint8"},{"name":"TurnMode;","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Config",""],"type":"uint8"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"name":"*","properties":[{"name":"OnEmitterQualityChanged;","flags":[null,"BlueprintAssignable",""],"type":"FOnEmitterQualityChanged"},{"name":"OnStereoLayerTypeChanged;","flags":[null,"BlueprintAssignable",""],"type":"FOnStereoLayerTypeChanged"},{"name":"OnHeadBobSettingChanged;","flags":[null,"BlueprintAssignable",""],"type":"FOnHeadBobSettingChanged"},{"name":"OnHUDWeatherEffectsChanged;","flags":[null,"BlueprintAssignable",""],"type":"FOnHUDWeatherEffectsChanged"}],"functions":[]},{"name":"/* Set config var for head bob effect in nonVR character /* Return config state for head bob effect in nonVR character /*Takes in the Y Axis value and returns the appropriate value, taking into account the pitch inversion setting. /** Master volume value /** Ambient volume value /** Dialog volume value /** Effect volume value /** Music volume value /* Camera Pitch inversion*","properties":[],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"/*Server set username /* This is called on client proxies when this player states owner is blocked by the local client user. This Username is considered cannon as it is only confirmed and set by the server side code. This is here so that the server has easier access to usernames on demand. *","properties":[],"functions":[]},{"name":"/* Blueprint exposed functions that transport data to the public API/* This is relevant for network game modes only and is always null on clients. Clients copy of this token can be found in the GameInstance /* Setter for SessionToken This usually happens while the character is waiting to be spawned after joining a world.  /* Array of usernames that are blocked to this user. For consistency, all requests are defined in the API subsystem and all responses must be handled in the relevant object. /* Session token for client proof. Multiplayer maps, server only. *","properties":[{"name":"Mappings;","flags":[null,"BlueprintReadOnly"," Category = \"Custom Input Mappings\"",""],"type":"TArray<FEnhancedActionKeyMapping>"}],"functions":[]},{"name":"","properties":[{"name":"OnDoorLockStateChanged;","flags":[null,"BlueprintAssignable"," BlueprintCallable",""],"type":"FOnDoorLockStateChanged"}],"functions":[]},{"name":"***/* Query if the door is locked. /* If true, the door will spawn in its open position. /* Marker for where the door should rest when fully opened. /* This sets itself on construction script. /* How long the door should take to transition its open state /*Sound to play when door is opening /* Sound to play when door is closing *If you want the door to be proximity triggered but initially locked then set bLocked to true. /*Whether the force functionality is allowed on this instance. /* Set time that the door should take to toggle its state when using 'forced' functionality. /*If true, the door will automatically close itself after the AutoCloseTimeout time has elapsed /* requires bAutoClose = true, how long the door should stay open before closing itself. *","properties":[],"functions":[]},{"name":"*","properties":[{"name":"FirstRun;","flags":[null,"",""],"type":"int"},{"name":"LevelCompleteState;","flags":[null,"",""],"type":"TMap<int,bool>"},{"name":"bool>","flags":[null,"",""],"type":"TMap<int,"},{"name":"bool>","flags":[null,"",""],"type":"TMap<int,"}],"functions":[]},{"name":"*","properties":[],"functions":[]},{"properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"*If a player is not banned, a message should be received with the character display information for the server to spawn the pawn. /* Send a LOG message over the socket /* Report player ban to the backend /* Report player rank change. Adjusted Rank should be the new rank to apply. /* World context /* This is parsed in from a config file. This file is not included in client builds. /*Pointer ref to the actual websocket object /* Handles when the socket connection has opened. /* Handles connection errors. This is specifically when a connect attempt fails. See OnClosed for when an open connection has terminated. /* Low level message invoke.  Data is raw at this point and needs to be parsed to invoke any appropriate action. /* Invoked when the websocket closes for any reason. /*\tHandle Websocket connection attempt futility. Broadcasts OnConnectionFutility event. /* Ping the socket to assert connectivity. /* Handle server response to ping request /* Handle if socket doesn't respond to ping request. This is on a timer /* Respond to a ping query from the websocket. /* Timer handle for ping timeout /* timer handle for ping request *","properties":[],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"*","properties":[{"name":"CameraMain;","flags":[null,"BlueprintReadWrite"," VisibleAnywhere",""],"type":"UCameraComponent*"},{"name":"HandTargetComponent0;","flags":[null,"BlueprintReadWrite"," VisibleAnywhere",""],"type":"USceneComponent*"}],"functions":[]},{"name":"*","properties":[{"name":"GameSave;","flags":[null,"",""],"type":"UWOB_SaveGameSettings*"},{"name":"bool>","flags":[null,"",""],"type":"TMap<int,"},{"name":"bool>","flags":[null,"",""],"type":"TMap<int,"},{"name":"bool>","flags":[null,"",""],"type":"TMap<int,"},{"name":"UUserWidget>","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Loading Screen\"",""],"type":"TSubclassOf<class"},{"name":"LoadingScreenTextureVR;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Loading Screen\"",""],"type":"UTexture*"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"Helm{","flags":[null,"BlueprintReadWrite",""],"type":"bool"}],"functions":[]},{"name":"","properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"name":"*","properties":[{"name":"VRMovementMode;","flags":[null,"Config",""],"type":"TEnumAsByte<EVRLocomotionMode>"},{"name":"VRTurnMode;","flags":[null,"Config",""],"type":"TEnumAsByte<EVRTurnMode>"},{"name":"TraceTeleport(FVector&","flags":[null,"BlueprintReadWrite"," VisibleAnywhere"," Category = \"Components\"",";","UNiagaraComponent* TeleportArcFX;","","BlueprintReadWrite"," EditAnywhere"," Category = \"Components\"",";","UStaticMeshComponent* TeleportDesinationMarker;","","/* Traces the teleport location from projected angle using physics */","UFUNCTION(BlueprintCallable"," Category = \"VR Movement\"","",["(BlueprintCallable, Category = \"VR Movement\"","UFUNCTION"]],"type":"bool"},{"name":"SnapValue{45.f};","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"VR Movement\"",""],"type":"float","description":"/*Checks whether the player can fit in the teleport location. Returns true if no collision is detected against the capsule. /* Attempt to teleport the player to the given location. Runs Simulate if CollisionCheck = true and may fail to teleport if a collision is detected. /*Handle adding local rotation if Snap turn is enabled /*How far to rotate per \"snap\" turn call "}],"functions":[]},{"name":"","properties":[{"name":"MaxLineDisplayTime;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"float","description":"/* Maximum amount of time, in seconds, that an individual subtitle can remain visible "},{"name":"SubtitleCue;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"TArray<FSubtitleCue>","description":"/* Pointer to the most recently active subtitle cue for this Actor. "},{"name":"CurrentSubtitleIndex;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"int","description":"/* The current index being displayed from the subtitle cue array "},{"name":"bActiveSubtitles;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"bool","description":"/* if true then subtitles are actively being timed and tracked "},{"name":"LatestSubtitleInitialDisplayTime;","flags":[null,"",""],"type":"float","description":"/* The game time that the latest subtitle was originally rendered "},{"name":"SubtitleCueStartTime;","flags":[null,"",""],"type":"float"},{"name":"SubtitleTextRender;","flags":[null,"BlueprintReadWrite"," VisibleAnywhere",""],"type":"UTextRenderComponent*"},{"name":"SubtitleOffset;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"FVector"},{"name":"SubtitleRenderDefaultText;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"",""],"type":"FText"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"name":"","properties":[{"name":"OnInputDeviceChanged;","flags":[null,"BlueprintAssignable",""],"type":"FOnInputDeviceChanged"}],"functions":[]},{"name":"","properties":[{"name":"SpeechComponent;","flags":[null,"BlueprintReadWrite"," VisibleAnywhere",""],"type":"UAudioComponent*"}],"functions":[]},{"name":"*","properties":[{"name":"OnStatsDownloaded;","flags":[null,"BlueprintAssignable",""],"type":"FOnStatsDownloaded"}],"functions":[]},{"name":"*","properties":[{"name":"OnNewDataLog;","flags":[null,"BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"",""],"type":"FWOBOnNewDataLog"},{"name":"OnHelmCollected;","flags":[null,"BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"",""],"type":"FWOBOnHelmCollected"}],"functions":[]},{"properties":[],"functions":[]},{"name":"*died from the damage given. ","properties":[{"name":"bIsTracing;","flags":[null,"",""],"type":"bool"},{"name":"TeleportArc;","flags":[null,"BlueprintReadOnly",""],"type":"UNiagaraComponent*"},{"name":"DestinationMarker;","flags":[null,"BlueprintReadOnly",""],"type":"UNiagaraComponent*"},{"name":"ProjectileActor;","flags":[null,"BlueprintReadOnly",""],"type":"AActor*"},{"name":"TraceOriginComponent;","flags":[null,"BlueprintReadOnly",""],"type":"USkeletalMeshComponent*"},{"name":"ProjectileVelocity;","flags":[null,"BlueprintReadOnly",""],"type":"FVector"}],"functions":[]},{"name":"","properties":[{"name":"AlbumTrackMediaFiles;","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Category = \"Album Track files\"",""],"type":"TArray<USoundBase*>","description":"/*The uasset media files for each track. Should be added in album track order "},{"name":"StemPreviewTime{","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Category = \"Stem Playback\"",""],"type":"float"}],"functions":[]},{"properties":[],"functions":[]},{"name":"/* Base class for NPC Characters. Implements Wake/Sleep logic and invoking behavior on the AI controller. ","properties":[{"name":"OnWake;","flags":[null,"BlueprintAssignable"," BlueprintCallable",""],"type":"FOnWake"},{"name":"OnFactionUpdated;","flags":[null,"BlueprintAssignable"," BlueprintCallable",""],"type":"FOnFactionUpdated"}],"functions":[]},{"name":"/* Returns true if this NPC is currently idle and is NOT running its behavior tree./* Returns true if this NPC is currently awake and running its behavior tree the next time it checks. /*The behavior to give this NPC when it wakes. /* If true, behavior tree logic will not run on begin play, but will wait until activated by another means. /* If true, the NPC will wake when it's seen by the player /*If true, the NPC will wake when its the specified distance from the player /*The distance from the player to enable behavior logic. bWakeAtDistanceFromPlayer must be enabled.  /*Set this NPC's faction. Determines who this NPC considers neutral/friendly/hostile. See AITeam Settings in project settings for each team's reactions. /*Initialises the NPC's behavior tree. /* Override the NPC's behavior with the specified Behavior. Will not apply if Sleep state is not overriden and NPC is currently asleep. *","properties":[{"name":"OnAnyKeyPressed;","flags":[null,"BlueprintAssignable",""],"type":"FOnAnyKeyPressed"}],"functions":[]},{"properties":[{"name":"GamepadKey;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"FKey"},{"name":"Xbox;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"FText"},{"name":"DualShock;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"FText"},{"name":"Switch;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"FText"},{"name":"SuperNintendo;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"FText"}],"functions":[]},{"name":"","properties":[{"name":"MusicFile;","flags":[null,"",""],"type":"USoundBase*","description":"by a data log or stem /* Used to play any data log file /* Used to play a stem file "},{"name":"bIsMusicPlaying;","flags":[null,"",""],"type":"bool","description":"/* Re-enable music and unbind from finished event when a log has finished. "},{"name":"bIsLogPlaying;","flags":[null,"",""],"type":"bool"}],"functions":[]},{"name":"","properties":[{"name":"Footsteps_Rock;","flags":[null,"BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"Footsteps_Water;","flags":[null,"BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"Footsteps_Grass;","flags":[null,"BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"Footsteps_TallGrass;","flags":[null,"BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"Footsteps_Snow;","flags":[null,"BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"Footsteps_Metal;","flags":[null,"BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"USoundBase*"},{"name":"FootstepInterval{1.0f};","flags":[null,"BlueprintReadWrite"," EditDefaultsOnly"," Category = \"Footstep Audio\"",""],"type":"float","description":"/*The time between footsteps if moving at standard walk speed "}],"functions":[]},{"properties":[{"name":"InitialHealth;","flags":[null,"BlueprintReadWrite",""],"type":"int"},{"name":"MaxHealth;","flags":[null,"BlueprintReadWrite",""],"type":"int"},{"name":"<TSubclassOf<UDamageType>,int>","flags":[null,"BlueprintReadWrite",""],"type":"TMap"},{"name":"ParryRating;","flags":[null,"BlueprintReadWrite",""],"type":"int"},{"name":"DodgeRating;","flags":[null,"BlueprintReadWrite",""],"type":"int"},{"name":"CharacterLevel;","flags":[null,"BlueprintReadWrite",""],"type":"int"},{"name":"Immunities;","flags":[null,"BlueprintReadWrite",""],"type":"TArray<TSubclassOf<UDamageType>>"}],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"consistently. ","properties":[],"functions":[]},{"properties":[{"name":"Attitude;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"TArray<TEnumAsByte<ETeamAttitude::Type>>"}],"functions":[]},{"properties":[],"functions":[]},{"properties":[],"functions":[]},{"properties":[{"name":"ID;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"int"},{"name":"AlertText;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"FString"},{"name":"Title;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"FString"},{"name":"SoundFile;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"USoundCue*"},{"name":"Transcript;","flags":[null,"BlueprintReadWrite"," EditAnywhere"," meta = (MultiLine = \"true\"","","",["(MultiLine = \"true\"","BlueprintReadWrite, EditAnywhere, meta = "]],"type":"FString"},{"name":"TranscriptColor;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"FSlateColor"},{"name":"TranscriptShowTime;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"float"},{"name":"fIsTrackStem;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"bool"},{"name":"StemType;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"TEnumAsByte<EStemType>"},{"name":"AlbumTrack;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"TEnumAsByte<EAlbumTrack>"},{"name":"NextLog;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"int"},{"name":"bAllowSkip;","flags":[null,"BlueprintReadWrite"," EditAnywhere",""],"type":"bool"}],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"","properties":[{"name":"OnNewDataLog;","flags":[null,"BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"",""],"type":"FWOBOnNewDataLog2D"},{"name":"OnHelmCollected;","flags":[null,"BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"",""],"type":"FWOBOnHelmCollected2D"}],"functions":[]},{"name":"/* Slight hack (hijack) of FTimerDynamicDelegate to bind an event with no params through the character interface /* Not part of interface /* Trace for a teleport location. Returns true if a navigable ground location was found. Updates Teleport visuals locations accordingly, but does not set visibility. /*Ideally should be called using the interface wrapped ISetCheckpoint. If you're calling this directly in blueprints, you're probably breaking the convention./*Idealy should be called using the interface wrapped IRespawnAtCheckpoint. If you're calling this directly in blueprints, you're probably breaking the convention./*The World location that the actor will be teleported to when releasing the teleport button. ","properties":[],"functions":[]},{"name":"undefined","properties":[{"name":"FaceId","flags":[null,"","",null],"type":"int"},{"name":"HairId","flags":[null,"","",null],"type":"int"},{"name":"ShirtId","flags":[null,"","",null],"type":"int"},{"name":"LegsId","flags":[null,"","",null],"type":"int"},{"name":"FeetId","flags":[null,"","",null],"type":"int"},{"name":"Accessory1","flags":[null,"","",null],"type":"int"},{"name":"Accessory2","flags":[null,"","",null],"type":"int"}],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"*","properties":[{"name":"UserMotionControllerModel","flags":[null,"EditAnywhere"," BlueprintReadOnly","",null],"type":"TEnumAsByte<E_MotionControllerModel>"},{"name":"OnControlPointerPitchChanged","flags":[null,"BlueprintAssignable"," EditAnywhere"," BlueprintReadWrite","",null],"type":"FControlPointerPitchChanged"}],"functions":[{"name":"SaveChangesToConfig","flags":[],"args":[{}],"returnType":"void"}]},{"name":"*","properties":[],"functions":[]},{"name":"*","properties":[{"name":"OnAlertStartDelegate","flags":[null,"BlueprintAssignable"," Category = \"Delegates\"","",null],"type":"FOnAlertStartDelegate"},{"name":"OnAlertEndDelegate","flags":[null,"BlueprintAssignable"," Category = \"Delegates\"","",null],"type":"FOnAlertEndDelegate"},{"name":"OnFoundPlayerDelegate","flags":[null,"BlueprintAssignable"," Category = \"Delegates\"","",null],"type":"FOnFoundPlayerDelegate"},{"name":"OnLostPlayerDelegate","flags":[null,"BlueprintAssignable"," Category = \"Delegates\"","",null],"type":"FOnLostPlayerDelegate"},{"name":"bCanSeePlayer","flags":[null,"VisibleAnywhere"," BlueprintReadOnly"," Category = \"Perception\"","",null],"type":"bool","description":"controlled pawn and the player pawn "},{"name":"bIsAlert","flags":[null,"VisibleAnywhere"," BlueprintReadOnly"," Category = \"Perception\"","",null],"type":"bool","description":"are active."},{"name":"AlertValue","flags":[null,"VisibleAnywhere"," BlueprintReadOnly"," Category = \"Perception\"","",null],"type":"float","description":"attack behavior."},{"name":"LastStimLocation","flags":[null,"VisibleAnywhere"," BlueprintReadOnly"," Category = \"Perception\"","",null],"type":"FVector","description":"/* The world location of the last triggered stimuli event."},{"name":"InitialAlertTime","flags":[null,"","",null],"type":"float"},{"name":"LastAlertTickTime","flags":[null,"","",null],"type":"float"}],"functions":[{"name":"SetCanSeePlayer","flags":[],"args":[{"type":"bool","paramName":"state"}],"returnType":"void"},{"name":"SetIsAlert","flags":[],"args":[{"type":"bool","paramName":"state"}],"returnType":"void"},{"name":"OnPerceptionUpdate","flags":[],"args":[{"type":"AActor*","paramName":"_Actor"},{"type":"FAIStimulus","paramName":"_AIStimulus"}],"returnType":"void"},{"name":"SetPawnMovementSpeed","flags":[],"args":[{"type":"const","paramName":"float"}],"returnType":"void"},{"name":"ResetAIState","flags":[],"args":[{}],"returnType":"void"}]},{"name":"*","properties":[{"name":"OnAIStateChanged","flags":[null,"BlueprintAssignable"," BlueprintCallable","",null],"type":"FOnAIStateChanged"},{"name":"bResetBehaviorOnCombatChange","flags":[null,"BlueprintReadWrite"," EditDefaultsOnly"," Category=\"Behavior\"","",null],"type":"bool"},{"name":"CurrentAIState","flags":[null,"","",null],"type":"TEnumAsByte<EBehaviorState>"}],"functions":[{"name":"OverrideAIState","flags":[],"args":[{"type":"const","paramName":"TEnumAsByte<EBehaviorState>"}],"returnType":"bool"},{"name":"SetupFaction","flags":[],"args":[{}],"returnType":"void"}]},{"name":"","properties":[{"name":"OnTriggerAudioPulse","flags":[null,"BlueprintAssignable"," Category = \"Level Events\"","",null],"type":"FTriggerAudioPulse"},{"name":"CurrentRadius","flags":[null,"BlueprintReadOnly"," Category = \"Audio Pulse\"","",null],"type":"float"},{"name":"bAudioPulseActive","flags":[null,"BlueprintReadOnly","",null],"type":"bool"},{"name":"PulseStartTime","flags":[null,"BlueprintReadOnly","",null],"type":"float"}],"functions":[{"name":"SetupAudioPulse","flags":[],"args":[{"type":"FVector&","paramName":"_Location"}],"returnType":"void"}]},{"name":"*","properties":[{"name":"Success","flags":[null,"BlueprintAssignable","",null],"type":"FGotSteamStats"},{"name":"Failed","flags":[null,"BlueprintAssignable","",null],"type":"FGotSteamStats"}],"functions":[{"name":"StatsDownloaded","flags":[],"args":[{}],"returnType":"void"}]},{"name":"*","properties":[],"functions":[]},{"name":"","properties":[{"name":"DataLogID","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"DataLog\"","",null],"type":"int"}],"functions":[]},{"name":"","properties":[{"name":"TooltipWidget","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Tooltips\"","",null],"type":"TSubclassOf<UUserWidget>"},{"name":"TooltipText","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Tooltips\"","",null],"type":"FText"},{"name":"SpawnOrigin","flags":[null,"BlueprintReadOnly"," Category = \"Spawn\"","",null],"type":"FTransform"},{"name":"IsBeingHeld","flags":[null,"BlueprintReadOnly"," Category = \"State\"","",null],"type":"bool"},{"name":"HandSocketOffset","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Config\"","",null],"type":"FVector"},{"name":"GripType","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Config\"","",null],"type":"TEnumAsByte<EHandState>"},{"name":"IsInVR","flags":[null,"","",null],"type":"bool"},{"name":"InterpolatingPickup","flags":[null,"","",null],"type":"bool"},{"name":"InterpolationTargetLocation","flags":[null,"","",null],"type":"FVector"},{"name":"InterpolationOriginLocation","flags":[null,"","",null],"type":"FVector"},{"name":"InterpolationCurrentLocation","flags":[null,"","",null],"type":"FVector"},{"name":"PickupStartTime","flags":[null,"","",null],"type":"float"}],"functions":[{"name":"OnHoverStart","flags":[],"args":[{}],"returnType":"void"},{"name":"OnHoverEnd","flags":[],"args":[{}],"returnType":"void"},{"name":"PickUp","flags":[],"args":[{"type":"USkeletalMeshComponent*","paramName":"_HandMesh"}],"returnType":"void"},{"name":"PutDown","flags":[],"args":[{}],"returnType":"void"},{"name":"ReturnToOrigin","flags":[],"args":[{}],"returnType":"void"},{"name":"AttachToPlayer","flags":[],"args":[{}],"returnType":"void"},{"name":"ThrowableCollision","flags":[],"args":[{"type":"UPrimitiveComponent*","paramName":"_Component"},{"type":"AActor*","paramName":"_Actor"},{"type":"UPrimitiveComponent*","paramName":"_OtherComponent"},{"type":"FVector","paramName":"_Location"},{"type":"const","paramName":"FHitResult&"}],"returnType":"void"}]},{"name":"*","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[{"name":"PresetToLoad","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Set Scene\"","",null],"type":"TEnumAsByte<ESceneLightDefaults>"},{"name":"bIsDay","flags":[null,"","",null],"type":"bool"},{"name":"StartTransitionRotation","flags":[null,"","",null],"type":"FRotator"},{"name":"SecondaryStartTransitionRotation","flags":[null,"","",null],"type":"FRotator"},{"name":"GoalTransitionRotation","flags":[null,"","",null],"type":"FRotator"},{"name":"SecondaryGoalTransitionRotation","flags":[null,"","",null],"type":"FRotator"},{"name":"TransitionSeconds","flags":[null,"","",null],"type":"float"},{"name":"TransitionToNight","flags":[null,"","",null],"type":"bool"}],"functions":[{"name":"TransitionSceneToPreset","flags":[],"args":[{"type":"const","paramName":"TEnumAsByte<ESceneLightDefaults>"},{"type":"const","paramName":"bool"},{"type":"const","paramName":"float&"}],"returnType":"void"},{"name":"TransitionToScene","flags":[],"args":[{"type":"const","paramName":"FVector&"},{"type":"const","paramName":"TEnumAsByte<ESceneLightTarget>"},{"type":"const","paramName":"float"}],"returnType":"void"},{"name":"ApplySceneSettingsPreset","flags":[],"args":[{"type":"TEnumAsByte<ESceneLightDefaults>","paramName":"_Preset"}],"returnType":"void"},{"name":"SwitchOnDay","flags":[],"args":[{}],"returnType":"void"},{"name":"SwitchOffDay","flags":[],"args":[{}],"returnType":"void"},{"name":"SwitchOnNight","flags":[],"args":[{}],"returnType":"void"},{"name":"SwitchOffNight","flags":[],"args":[{}],"returnType":"void"},{"name":"AssertPointers","flags":[],"args":[{}],"returnType":"bool"},{"name":"CalcSecondaryTransitionRotationValues","flags":[],"args":[{}],"returnType":"void"}]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[{"name":"CrateType","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Default\"","",null],"type":"TEnumAsByte<ECrateType>"},{"name":"DataLogID","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Default\""," meta=(EditCondition = \"CrateType == ECrateType::DataLogCrate\"","","",["(EditCondition = \"CrateType == ECrateType::DataLogCrate\"","BlueprintReadWrite, EditAnywhere, Category = \"Default\", meta="],null],"type":"int"},{"name":"StemID","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Default\""," meta = (EditCondition = \"CrateType == ECrateType::AudioStemCrate\"","","",["(EditCondition = \"CrateType == ECrateType::AudioStemCrate\"","BlueprintReadWrite, EditAnywhere, Category = \"Default\", meta = "],null],"type":"int"},{"name":"ItemToSpawn","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Default\""," meta = (EditCondition = \"CrateType == ECrateType::UpgradeCrate\"","","",["(EditCondition = \"CrateType == ECrateType::UpgradeCrate\"","BlueprintReadWrite, EditAnywhere, Category = \"Default\", meta = "],null],"type":"TSubclassOf<AActor>"}],"functions":[]},{"name":"","properties":[{"name":"bAlwaysUsePerformanceInVR","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Category = \"Materials\"","",null],"type":"bool"},{"name":"bOverrideQuality","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Category = \"Materials\"","",null],"type":"bool"},{"name":"OverrideQuality","flags":[null,"EditAnywhere"," BlueprintReadOnly"," Category = \"Materials\""," meta =(EditCondition=bOverrideQuality","","",["(EditCondition=bOverrideQuality","EditAnywhere, BlueprintReadOnly, Category = \"Materials\", meta ="],null],"type":"TEnumAsByte<EEmitterQualitySetting>"}],"functions":[]},{"name":"","properties":[{"name":"OnDoorLockStateChanged","flags":[null,"BlueprintAssignable"," BlueprintCallable","",null],"type":"FOnDoorLockStateChanged"},{"name":"bAnimating","flags":[null,"BlueprintReadOnly"," Category = \"State\"","",null],"type":"bool"},{"name":"bIsOpen","flags":[null,"BlueprintReadOnly"," Category = \"state\"","",null],"type":"bool"},{"name":"bStartOpen","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"default\"","",null],"type":"bool","description":"/* If true, the door will spawn in its open position. "},{"name":"DoorOpenTarget","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"default\""," Meta = (MakeEditWidget = true","","",["(MakeEditWidget = true","BlueprintReadWrite, EditAnywhere, Category = \"default\", Meta = "],null],"type":"FVector","description":"/* Marker for where the door should rest when fully opened. "},{"name":"DoorOpenTargetRelative","flags":[null,"","",null],"type":"FVector"},{"name":"DoorCloseTarget","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"default\""," Meta = (MakeEditWidget = true","","",["(MakeEditWidget = true","BlueprintReadWrite, EditAnywhere, Category = \"default\", Meta = "],null],"type":"FVector","description":"/* This sets itself on construction script. "},{"name":"bLocked","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"default\"","",null],"type":"bool"},{"name":"bProximityDoor","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"default\"","",null],"type":"bool","description":"*If you want the door to be proximity triggered but initially locked then set bLocked to true. "},{"name":"bAutoClose","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"default\"","",null],"type":"bool","description":"/*If true, the door will automatically close itself after the AutoCloseTimeout time has elapsed "},{"name":"AutoCloseStartTime","flags":[null,"","",null],"type":"float"},{"name":"TimeSinceOpened","flags":[null,"","",null],"type":"float"},{"name":"bAutoClosing","flags":[null,"","",null],"type":"bool"},{"name":"AnimStartTime","flags":[null,"","",null],"type":"float"},{"name":"bForcing","flags":[null,"","",null],"type":"bool"},{"name":"ForceOriginPoint","flags":[null,"","",null],"type":"FVector"}],"functions":[{"name":"Open","flags":[],"args":[{}],"returnType":"void"},{"name":"Close","flags":[],"args":[{}],"returnType":"void"},{"name":"ToggleDoorOpen","flags":[],"args":[{}],"returnType":"void"},{"name":"ForceToggleDoor","flags":[],"args":[{}],"returnType":"void","description":"*"},{"name":"ForceCloseDoor","flags":[],"args":[{}],"returnType":"void","description":"*"},{"name":"ForceOpenDoor","flags":[],"args":[{}],"returnType":"void","description":"*"},{"name":"PlayDoorAnimSound","flags":[],"args":[{}],"returnType":"void"},{"name":"OnPlayerEnterProximity","flags":[],"args":[{"type":"UPrimitiveComponent*","paramName":"OverlappedComp"},{"type":"AActor*","paramName":"OtherActor"},{"type":"UPrimitiveComponent*","paramName":"OtherComp"},{"type":"int32","paramName":"OtherBodyIndex"},{"type":"bool","paramName":"bFromSweep"},{"type":"const","paramName":"FHitResult&"}],"returnType":"void"},{"name":"OnPlayerExitPriximity","flags":[],"args":[{"type":"UPrimitiveComponent*","paramName":"OverlappedComp"},{"type":"AActor*","paramName":"OtherActor"},{"type":"UPrimitiveComponent*","paramName":"OtherComp"},{"type":"int32","paramName":"OtherBodyIndex"}],"returnType":"void"}]},{"name":"*","properties":[{"name":"OnAccountRegistrationFailed","flags":[null,"BlueprintAssignable","",null],"type":"FAccountRegistrationFailed","description":"*/* Account registration "},{"name":"OnAccountLoginFail","flags":[null,"BlueprintAssignable","",null],"type":"FAccountLoginFail","description":"/*Account Login "},{"name":"OnAccountLoginSuccess","flags":[null,"BlueprintAssignable","",null],"type":"FAccountLoginSuccess"},{"name":"OnAccountLogout","flags":[null,"BlueprintAssignable","",null],"type":"FAccountLoggedOut","description":"/* Account Logout"},{"name":"OnCharacterDataUpdated","flags":[null,"BlueprintAssignable","",null],"type":"FCharacterDataUpdated","description":"/* Character Data "},{"name":"OnCharacterDataRequestFailed","flags":[null,"BlueprintAssignable","",null],"type":"FCharacterDataRequestFailed"},{"name":"OnCharacterCreated","flags":[null,"BlueprintAssignable","",null],"type":"FCharacterCreated"},{"name":"OnCharacterCreationFailed","flags":[null,"","",null],"type":"FCharacterCreationFailed"},{"name":"OnUserBlockedUser","flags":[null,"","",null],"type":"FUserBlockedUser","description":"/* User blocked another user, event "},{"name":"OnUserBlockRequestFailed","flags":[null,"","",null],"type":"FUserBlockRequestFail"}],"functions":[{"name":"AccountRegistrationSucceeded","flags":[],"args":[{}],"returnType":"void"},{"name":"AccountLoginFailed","flags":[],"args":[{"type":"FString","paramName":"reason"}],"returnType":"void"},{"name":"AccountLoginSucceeded","flags":[],"args":[{}],"returnType":"void"},{"name":"LogoutAccount","flags":[],"args":[{}],"returnType":"void"},{"name":"AccountLoggedOut","flags":[],"args":[{}],"returnType":"void"},{"name":"CharacterDataUpdated","flags":[],"args":[{}],"returnType":"void"},{"name":"CharacterDataRequestFailed","flags":[],"args":[{"type":"FString","paramName":"reason"}],"returnType":"void"},{"name":"CharacterCreationSuccessful","flags":[],"args":[{}],"returnType":"void"},{"name":"CharacterCreationFailed","flags":[],"args":[{"type":"FString","paramName":"reason"}],"returnType":"void"},{"name":"SetAuthToken","flags":[],"args":[{"type":"FString","paramName":"_token"}],"returnType":"void","description":"/* Auth Token Setter"}]},{"name":"/*API Handled responses *","properties":[],"functions":[]},{"name":"","properties":[{"name":"InkWells","flags":[null,"BlueprintReadWrite","",null],"type":"TArray<bool>"},{"name":"DataLogs","flags":[null,"BlueprintReadWrite","",null],"type":"TArray<bool>"}],"functions":[]},{"name":"","properties":[{"name":"OnLowFear","flags":[null,"BlueprintAssignable","",null],"type":"FOnLowFear","description":"it will have no effect on the server or any other network client due to replication. "},{"name":"OnModerateFear","flags":[null,"BlueprintAssignable","",null],"type":"FOnModerateFear"},{"name":"OnHighFear","flags":[null,"BlueprintAssignable","",null],"type":"FOnHighFear"},{"name":"OnMaxFear","flags":[null,"BlueprintAssignable","",null],"type":"FOnMaxFear"},{"name":"OnNewDataLog","flags":[null,"BlueprintAssignable"," Category = \"Inventory\"","",null],"type":"FOnNewDataLog"},{"name":"Event_OnHelmCollected","flags":[null,"BlueprintAssignable"," BlueprintCallable"," Category = \"Events\"","",null],"type":"FOnHelmCollected"},{"name":"TimeFootstepLastPlayed","flags":[null,"","",null],"type":"float"},{"name":"LatestCheckpoint","flags":[null,"VisibleAnywhere"," BlueprintReadOnly"," Category = \"Checkpoint\"","",null],"type":"FTransform"},{"name":"IntroPP_LerpStartTime","flags":[null,"","",null],"type":"float"},{"name":"bIntroPP_Forward","flags":[null,"","",null],"type":"bool"},{"name":"PPSettings_Intro","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Category = \"PostProcess Settings\"","",null],"type":"FPostProcessSettings"},{"name":"Inventory","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Inventory\"","",null],"type":"FPlayerInventory"},{"name":"IsHoldingItem_L","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Inventory\"","",null],"type":"bool"},{"name":"IsHoldingItem_R","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Inventory\"","",null],"type":"bool"},{"name":"bIsSprinting","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Movement\"","",null],"type":"bool"},{"name":"CurrentSprintValue","flags":[null,"BlueprintReadOnly"," Category = \"Movement\"","",null],"type":"float"},{"name":"bMainMenuOpen","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Game State\"","",null],"type":"bool"}],"functions":[{"name":"DisableSprinting","flags":[],"args":[{}],"returnType":"void"},{"name":"EnableSprinting","flags":[],"args":[{}],"returnType":"void"},{"name":"RespawnAtLastCheckpoint","flags":[],"args":[{}],"returnType":"bool"},{"name":"GetPlayerEyeLoc","flags":[],"args":[{"type":"FVector&","paramName":"location"}],"returnType":"void"},{"name":"OnBeginOverlapWithInteractablePanel","flags":[],"args":[{}],"returnType":"void"},{"name":"OnEndOverlapWithInteractablePanel","flags":[],"args":[{}],"returnType":"void"},{"name":"TakeFearDamage","flags":[],"args":[{"type":"const","paramName":"float"}],"returnType":"void"},{"name":"NewDataLogCollected","flags":[],"args":[{"type":"const","paramName":"int"}],"returnType":"void"},{"name":"AddDataLog","flags":[],"args":[{"type":"const","paramName":"int"}],"returnType":"void"},{"name":"AddKeyItem","flags":[],"args":[{"type":"TEnumAsByte<EKeyItem>","paramName":"_item"}],"returnType":"void"},{"name":"RemoveKeyItem","flags":[],"args":[{"type":"TEnumAsByte<EKeyItem>","paramName":"_item"}],"returnType":"void"},{"name":"HasKeyItem","flags":[],"args":[{"type":"TEnumAsByte<EKeyItem>","paramName":"_item"}],"returnType":"bool"},{"name":"ToggleMainMenu","flags":[],"args":[{}],"returnType":"void"},{"name":"EnableIntroPostProcess","flags":[],"args":[{}],"returnType":"void","description":"*"},{"name":"DisablePostProcess","flags":[],"args":[{}],"returnType":"void","description":"*"},{"name":"ShowObjectivesStatic","flags":[],"args":[{}],"returnType":"void","description":"Expected to be called at the start of a level where none of the objectives are yet completed. "},{"name":"ShowObjectivesDynamic","flags":[],"args":[{}],"returnType":"void","description":"be on screen. "},{"name":"OnPuzzleSolved","flags":[],"args":[{}],"returnType":"void"},{"name":"PlayNewAmbienceTrack","flags":[],"args":[{"type":"USoundBase*","paramName":"Ambience"}],"returnType":"void"},{"name":"GetObjectiveStatus","flags":[],"args":[{"type":"const","paramName":"FString"}],"returnType":"bool"},{"name":"SetObjectiveStatus","flags":[],"args":[{"type":"const","paramName":"FString"},{"type":"bool","paramName":"_state"}],"returnType":"void"},{"name":"OnHelmetCollected","flags":[],"args":[{}],"returnType":"void"},{"name":"TraceSurfaceType","flags":[],"args":[{}],"returnType":"EPhysicalSurface"},{"name":"MaximumFear","flags":[],"args":[{}],"returnType":"void"},{"name":"StartSprint","flags":[],"args":[{}],"returnType":"void"},{"name":"EndSprint","flags":[],"args":[{}],"returnType":"void"},{"name":"SetPostProcess","flags":[],"args":[{"type":"FPostProcessSettings","paramName":"_Settings"}],"returnType":"void","description":"*"}]},{"name":"*","properties":[{"name":"Door2OpenTarget","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"default\""," Meta = (MakeEditWidget = true","","",["(MakeEditWidget = true","BlueprintReadWrite, EditAnywhere, Category = \"default\", Meta = "],null],"type":"FVector","description":"/* Marker for where the door should rest when fully opened. "},{"name":"Door2OpenTargetRelative","flags":[null,"","",null],"type":"FVector"},{"name":"Door2CloseTarget","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"default\""," Meta = (MakeEditWidget = true","","",["(MakeEditWidget = true","BlueprintReadWrite, EditAnywhere, Category = \"default\", Meta = "],null],"type":"FVector"},{"name":"ForceOrigin2Point","flags":[null,"","",null],"type":"FVector"}],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"*","properties":[{"name":"VRMovementMode","flags":[null,"Config","",null],"type":"TEnumAsByte<EVRLocomotionMode>"},{"name":"VRTurnMode","flags":[null,"Config","",null],"type":"TEnumAsByte<EVRTurnMode>"}],"functions":[{"name":"SimulateTeleportToLocation","flags":[],"args":[{"type":"const","paramName":"FVector"},{"type":"0"},{"type":"0)"},{"type":"const","paramName":"float"},{"type":"bool","paramName":"DrawDebug"}],"returnType":"bool","description":"/*Checks whether the player can fit in the teleport location. Returns true if no collision is detected against the capsule. "},{"name":"TeleportToLocation","flags":[],"args":[{"type":"const","paramName":"FVector"},{"type":"0"},{"type":"0)"},{"type":"bool","paramName":"Sweep"},{"type":"bool","paramName":"TeleportPhysics"},{"type":"bool","paramName":"CollisionCheck"}],"returnType":"void","description":"/* Attempt to teleport the player to the given location. Runs Simulate if CollisionCheck = true and may fail to teleport if a collision is detected. "},{"name":"SnapTurn","flags":[],"args":[{"type":"USceneComponent*","paramName":"VRRoot"},{"type":"float","paramName":"AxisValue"}],"returnType":"void","description":"/*Handle adding local rotation if Snap turn is enabled "},{"name":"PlaySingleFootstep","flags":[],"args":[{}],"returnType":"void"}]},{"name":"","properties":[{"name":"MaxLineDisplayTime","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"","",null],"type":"float","description":"/* Maximum amount of time, in seconds, that an individual subtitle can remain visible "},{"name":"SubtitleCue","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"","",null],"type":"TArray<FSubtitleCue>","description":"/* Pointer to the most recently active subtitle cue for this Actor. "},{"name":"CurrentSubtitleIndex","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"","",null],"type":"int","description":"/* The current index being displayed from the subtitle cue array "},{"name":"bActiveSubtitles","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"","",null],"type":"bool","description":"/* if true then subtitles are actively being timed and tracked "},{"name":"LatestSubtitleInitialDisplayTime","flags":[null,"","",null],"type":"float","description":"/* The game time that the latest subtitle was originally rendered "},{"name":"SubtitleCueStartTime","flags":[null,"","",null],"type":"float"},{"name":"SubtitleOffset","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"","",null],"type":"FVector"},{"name":"SubtitleRenderDefaultText","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"Subtitles\"","",null],"type":"FText"}],"functions":[{"name":"PlaySubtitles","flags":[],"args":[{"type":"const","paramName":"TArray<FSubtitleCue>"},{"type":"const","paramName":"float"}],"returnType":"void"}]},{"name":"","properties":[{"name":"PatrolPointsLocal","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category = \"AI Pathing\""," Meta = (MakeEditWidget = true","","",["(MakeEditWidget = true","BlueprintReadWrite, EditAnywhere, Category = \"AI Pathing\", Meta = "],null],"type":"TArray<FVector>"},{"name":"PatrolPointsWorld","flags":[null,"BlueprintReadOnly"," Category = \"AI Pathing\"","",null],"type":"TArray<FVector>"},{"name":"LastPlaybackStartTime","flags":[null,"BlueprintReadOnly"," Category =\"AISpeech\"","",null],"type":"float"},{"name":"bCanSeePlayer","flags":[null,"BlueprintReadWrite"," Category = \"AI\"","",null],"type":"bool"},{"name":"bIsAlert","flags":[null,"BlueprintReadWrite"," Category = \"AI\"","",null],"type":"bool"},{"name":"LastSenseLocation","flags":[null,"BlueprintReadWrite"," Category = \"AI Perception\"","",null],"type":"FVector"}],"functions":[{"name":"OnAlertStart","flags":[],"args":[{}],"returnType":"void"},{"name":"OnAlertInvestigationUpdate","flags":[],"args":[{}],"returnType":"void"},{"name":"OnAlertEnd","flags":[],"args":[{}],"returnType":"void"},{"name":"OnFoundPlayer","flags":[],"args":[{}],"returnType":"void"},{"name":"OnLostPlayer","flags":[],"args":[{}],"returnType":"void"},{"name":"OnDamagedPlayer","flags":[],"args":[{}],"returnType":"void"},{"name":"OnBlockedByPlayer","flags":[],"args":[{}],"returnType":"void"},{"name":"OnDamagedByPlayer","flags":[],"args":[{}],"returnType":"void"},{"name":"OnKilledPlayer","flags":[],"args":[{}],"returnType":"void"},{"name":"OnKilledByPlayer","flags":[],"args":[{}],"returnType":"void"},{"name":"WakeAI","flags":[],"args":[{}],"returnType":"void"},{"name":"SleepAI","flags":[],"args":[{}],"returnType":"void"},{"name":"PlayAISpeech","flags":[],"args":[{"type":"TArray<USoundBase*>","paramName":"SoundList"},{"type":"int&","paramName":"indexToPlay"},{"type":"const","paramName":"int"}],"returnType":"void"},{"name":"OnSpeechPlaybackEnd","flags":[],"args":[{}],"returnType":"void"},{"name":"OnPerceptionUpdate","flags":[],"args":[{"type":"AActor*","paramName":"_Actor"},{"type":"FAIStimulus","paramName":"AIStimulus"}],"returnType":"void"}]},{"name":"","properties":[],"functions":[]},{"name":"/* Base class for NPC Characters. Implements Wake/Sleep logic and invoking behavior on the AI controller. ","properties":[{"name":"OnWake","flags":[null,"BlueprintAssignable"," BlueprintCallable","",null],"type":"FOnWake"},{"name":"OnFactionUpdated","flags":[null,"BlueprintAssignable"," BlueprintCallable","",null],"type":"FOnFactionUpdated"},{"name":"bIsAsleep","flags":[null,"","",null],"type":"bool"},{"name":"Faction","flags":[null,"BlueprintReadWrite"," EditAnywhere"," Category =\"Behavior\"","",null],"type":"TEnumAsByte<EGameTeam>","description":"/*Set this NPC's faction. Determines who this NPC considers neutral/friendly/hostile. See AITeam Settings in project settings for each team's reactions. "},{"name":"Health","flags":[null,"BlueprintReadOnly"," Category = \"Combat Stats\"","",null],"type":"int"},{"name":"HealthSystemComponent","flags":[null,"BlueprintReadOnly"," VisibleAnywhere"," Category = \"Component\"","",null],"type":"TObjectPtr<UHealthSystemComponent>"}],"functions":[{"name":"SetFaction","flags":[],"args":[{"type":"const","paramName":"uint8"},{"type":"const","paramName":"bool"}],"returnType":"void","description":"the next time it checks. "},{"name":"Wake","flags":[],"args":[{}],"returnType":"void","description":"/*Initialises the NPC's behavior tree. "},{"name":"ChangeBehavior","flags":[],"args":[{"type":"UBehaviorTree*","paramName":"BehaviorToRun"},{"type":"const","paramName":"bool"}],"returnType":"void","description":"/* Override the NPC's behavior with the specified Behavior. Will not apply if Sleep state is not overriden and NPC is currently asleep. "},{"name":"IsCharacterDead","flags":[],"args":[{}],"returnType":"bool"},{"name":"IsCharacterAlive","flags":[],"args":[{}],"returnType":"bool"},{"name":"GetHealth","flags":[],"args":[{}],"returnType":"int"},{"name":"GiveHealth","flags":[],"args":[{"type":"const","paramName":"int"}],"returnType":"int"},{"name":"ApplyDamage_CombatInterface","flags":[],"args":[{"type":"const","paramName":"int"},{"type":"TSubclassOf<UDamageType>","paramName":"DamageType"},{"type":"int&","paramName":"AmountReduced"},{"type":"TEnumAsByte<EDamageReductionReason>&","paramName":"DamageReductionReason"},{"type":"bool&","paramName":"bKilledTarget"}],"returnType":"int"}]},{"name":"","properties":[{"name":"OnNewDataLog","flags":[null,"BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"","",null],"type":"FWOBOnNewDataLog2D"},{"name":"OnHelmCollected","flags":[null,"BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"","",null],"type":"FWOBOnHelmCollected2D"}],"functions":[{"name":"BindHelmetCollectionEvent","flags":[],"args":[{"type":"const","paramName":"FTimerDynamicDelegate&"}],"returnType":"void","description":"/* Slight hack (hijack) of FTimerDynamicDelegate to bind an event with no params through the character interface "}]},{"name":"/* Not part of interface /* Trace for a teleport location. Returns true if a navigable ground location was found. Updates Teleport visuals locations accordingly, but does not set visibility. /*Ideally should be called using the interface wrapped ISetCheckpoint. If you're calling this directly in blueprints, you're probably breaking the convention./*Idealy should be called using the interface wrapped IRespawnAtCheckpoint. If you're calling this directly in blueprints, you're probably breaking the convention./*The World location that the actor will be teleported to when releasing the teleport button. ","properties":[{"name":"bIsTracing","flags":[null,"","",null],"type":"bool"},{"name":"ProjectileVelocity","flags":[null,"BlueprintReadOnly","",null],"type":"FVector"}],"functions":[{"name":"SetNiagaraComponents","flags":[],"args":[{"type":"UNiagaraComponent*","paramName":"_Trace"},{"type":"UNiagaraComponent*","paramName":"_Goal"}],"returnType":"void"},{"name":"StartTrace","flags":[],"args":[{"type":"AActor*","paramName":"_ProjectingActor"},{"type":"USkeletalMeshComponent*","paramName":"_HandComponent"},{"type":"FVector","paramName":"_Velocity"},{"type":"UNiagaraComponent*","paramName":"_TraceFX"},{"type":"UNiagaraComponent*","paramName":"_GoalFX"}],"returnType":"void"},{"name":"EndTrace","flags":[],"args":[{}],"returnType":"void"},{"name":"ProjectPhysicsEndPoint","flags":[],"args":[{}],"returnType":"void"}]},{"name":"*","properties":[{"name":"BlockedUsernames","flags":[null,"ReplicatedUsing= OnRep_BlockedUsernames","",null],"type":"TArray<FString>","description":"This usually happens while the character is waiting to be spawned after joining a world.  /* Array of usernames that are blocked to this user. "},{"name":"SessionToken","flags":[null,"","",null],"type":"FString","description":"/* Session token for client proof. Multiplayer maps, server only. "}],"functions":[{"name":"TryLogin","flags":[],"args":[{"type":"FString","paramName":"_username"},{"type":"FString","paramName":"_password"}],"returnType":"void","description":"/* Blueprint exposed functions that transport data to the public API"},{"name":"TryRegister","flags":[],"args":[{"type":"FString","paramName":"_email"},{"type":"FString","paramName":"_username"},{"type":"FString","paramName":"_password"}],"returnType":"void"},{"name":"TryGetCharacterData","flags":[],"args":[{}],"returnType":"void"},{"name":"TryCreateCharacter","flags":[],"args":[{"type":"FCharacterDisplayData","paramName":"data"}],"returnType":"void"},{"name":"ServerRequestSessionToken","flags":[],"args":[{}],"returnType":"void"},{"name":"SetServerSessionToken","flags":[],"args":[{"type":"const","paramName":"FString&"},{"type":"const","paramName":"FString&"}],"returnType":"void","description":"/* Setter for SessionToken "},{"name":"OnRep_BlockedUsernames","flags":[],"args":[{}],"returnType":"void"},{"name":"HideBlockedUsers","flags":[],"args":[{}],"returnType":"void"},{"name":"ReportBlockToNetGameMode","flags":[],"args":[{"type":"ADMT_PlayerControllerBase*","paramName":"_InstigatorController"},{"type":"const","paramName":"FString&"},{"type":"const","paramName":"FString&"}],"returnType":"void","description":"For consistency, all requests are defined in the API subsystem and all responses must be handled in the relevant object. "}]},{"name":"","properties":[{"name":"bIsMusicPlaying","flags":[null,"","",null],"type":"bool"},{"name":"bIsLogPlaying","flags":[null,"","",null],"type":"bool"}],"functions":[{"name":"SetZoneMusic","flags":[],"args":[{"type":"USoundBase*","paramName":"_MusicFile"}],"returnType":"void","description":"by a data log or stem "},{"name":"PlayDataLog","flags":[],"args":[{"type":"USoundBase*","paramName":"LogFile"}],"returnType":"void","description":"/* Used to play any data log file "},{"name":"PlayStem","flags":[],"args":[{"type":"USoundBase*","paramName":"StemFile"}],"returnType":"void","description":"/* Used to play a stem file "},{"name":"StopMusicPlayback","flags":[],"args":[{}],"returnType":"void"},{"name":"OnComponentFinishedPlaying","flags":[],"args":[{}],"returnType":"void","description":"/* Re-enable music and unbind from finished event when a log has finished. "}]},{"name":"*","properties":[{"name":"OnNewDataLog","flags":[null,"BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"","",null],"type":"FWOBOnNewDataLog"},{"name":"OnHelmCollected","flags":[null,"BlueprintAssignable"," BlueprintCallable"," Category = \"Delegates\"","",null],"type":"FWOBOnHelmCollected"}],"functions":[{"name":"BindHelmetCollectionEvent","flags":[],"args":[{"type":"const","paramName":"FTimerDynamicDelegate&"}],"returnType":"void","description":"/* Slight hack (hijack) of FTimerDynamicDelegate to bind an event with no params through the character interface "},{"name":"BindDataLogEvent","flags":[],"args":[{"type":"const","paramName":"FInterfaceNewDataLog&"}],"returnType":"void"}]},{"name":"/* Trace for a teleport location. Returns true if a navigable ground location was found. Updates Teleport visuals locations accordingly, but does not set visibility. /*Ideally should be called using the interface wrapped ISetCheckpoint. If you're calling this directly in blueprints, you're probably breaking the convention./*Idealy should be called using the interface wrapped IRespawnAtCheckpoint. If you're calling this directly in blueprints, you're probably breaking the convention./* Custom teleport logic. Can optionally sweep for overlaps and assert that character fits at target location before teleporting. /* Internal function to get object held by the player. /*The World location that the actor will be teleported to when releasing the teleport button. ","properties":[{"name":"InitialHealth","flags":[null,"BlueprintReadWrite","",null],"type":"int"},{"name":"MaxHealth","flags":[null,"BlueprintReadWrite","",null],"type":"int"},{"name":"ParryRating","flags":[null,"BlueprintReadWrite","",null],"type":"int"},{"name":"DodgeRating","flags":[null,"BlueprintReadWrite","",null],"type":"int"},{"name":"CharacterLevel","flags":[null,"BlueprintReadWrite","",null],"type":"int"}],"functions":[]},{"name":"","properties":[{"name":"Health","flags":[null,"BlueprintReadOnly"," Category = \"Health System\"","",null],"type":"int"},{"name":"MaxHealth","flags":[null,"BlueprintReadOnly"," Category = \"Health System\"","",null],"type":"int"},{"name":"ParryRating","flags":[null,"BlueprintReadOnly"," Category = \"Health System\"","",null],"type":"int"},{"name":"DodgeRating","flags":[null,"BlueprintReadOnly"," Category = \"Health System\"","",null],"type":"int"},{"name":"CharacterLevel","flags":[null,"BlueprintReadOnly"," Category = \"Health System\"","",null],"type":"int"}],"functions":[{"name":"Init","flags":[],"args":[{"type":"const","paramName":"FHealthSystemParameters"}],"returnType":"void"},{"name":"ApplyDamage","flags":[],"args":[{"type":"AActor*","paramName":"Instigator"},{"type":"const","paramName":"int"},{"type":"TSubclassOf<UDamageType>","paramName":"DamageType"},{"type":"int&","paramName":"AmountReduced"},{"type":"TEnumAsByte<EDamageReductionReason>&","paramName":"DamageReductionReason"},{"type":"bool&","paramName":"bKilledTarget"}],"returnType":"int","description":"consistently. "}]},{"name":"","properties":[{"name":"CurrentTrack","flags":[null,"BlueprintReadWrite"," Category =\"Stem Playback\"","",null],"type":"TEnumAsByte<EAlbumTrack>","description":"/* Ref to the current stem that is playing. "},{"name":"StemPreviewTimerHandle","flags":[null,"","",null],"type":"FTimerHandle"},{"name":"FadeOutStartTime","flags":[null,"","",null],"type":"float","description":"/*Internal tracker for fading out a track"},{"name":"bIsFadingOut","flags":[null,"","",null],"type":"bool"}],"functions":[{"name":"NewStem","flags":[],"args":[{"type":"EAlbumTrack","paramName":"track"}],"returnType":"void"},{"name":"PlayTrack","flags":[],"args":[{"type":"EAlbumTrack","paramName":"TrackToPlay"}],"returnType":"void"},{"name":"StopStemPlayback","flags":[],"args":[{}],"returnType":"void"},{"name":"PlayMusic","flags":[],"args":[{"type":"USoundBase*","paramName":"MusicToPlay"},{"type":"const","paramName":"float"},{"type":"const","paramName":"float"},{"type":"const","paramName":"bool"},{"type":"const","paramName":"bool"}],"returnType":"void"},{"name":"StopMusicPlayback","flags":[],"args":[{}],"returnType":"void"},{"name":"ClearPreviewTimer","flags":[],"args":[{}],"returnType":"void","description":"*"},{"name":"PlaybackStateChanged","flags":[],"args":[{"type":"EAudioComponentPlayState","paramName":"_State"}],"returnType":"void"},{"name":"ClearNowPlaying","flags":[],"args":[{}],"returnType":"void"},{"name":"GetTrackStemBytes","flags":[],"args":[{"type":"EAlbumTrack","paramName":"_Track"}],"returnType":"uint8"},{"name":"EnableStemsByByteSize","flags":[],"args":[{"type":"uint8","paramName":"_byte"}],"returnType":"void"},{"name":"FadeOutCurrentPlayback","flags":[],"args":[{}],"returnType":"void","description":"/*Invoked when the preview timer expires."},{"name":"GetStartTimeByStemByte","flags":[],"args":[{"type":"uint8","paramName":"stemBytes"}],"returnType":"float"}]},{"name":"","properties":[],"functions":[{"name":"IsActorPerceived","flags":[],"args":[{"type":"AActor*","paramName":"ActorToCheck"},{"type":"FString&","paramName":"ReactionType"}],"returnType":"bool","description":"/*Checks whether the given actor exists in this components trackers and the reaction type. "},{"name":"AssessExistingTargets","flags":[],"args":[{}],"returnType":"void","description":"/* Validates all currently perceived targets and cleans up any that don't satisfy the tracking requirements. "}]},{"name":"*","properties":[],"functions":[]},{"name":"","properties":[{"name":"LastFootstepTime","flags":[null,"","",null],"type":"float"}],"functions":[{"name":"TraceSurfaceType","flags":[],"args":[{}],"returnType":"EPhysicalSurface"},{"name":"PlayFootstepSoundBySurfaceType","flags":[],"args":[{"type":"const","paramName":"EPhysicalSurface"}],"returnType":"void"}]},{"name":"*","properties":[],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"","properties":[{"name":"bUncategorisedIfNotDefined","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"bool"},{"name":"FolderConflictRule","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"TEnumAsByte<EBatchSortFolderRule>","description":"*"}],"functions":[]},{"name":"","properties":[{"name":"Settings","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"FBatchSortConfig"}],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"*","properties":[{"name":"TeamAttitudes","flags":[null,"Category = \"Artificial Intelligence\""," EditAnywhere"," BlueprintReadOnly"," Config","",null],"type":"TArray<FTeamAttitude>"}],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"*","properties":[],"functions":[{"name":"ResetSaveProgress","flags":[],"args":[{}],"returnType":"void"},{"name":"UnlockLevel","flags":[],"args":[{"type":"const","paramName":"int"}],"returnType":"void"}]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"*","properties":[{"name":"OnEmitterQualityChanged","flags":[null,"BlueprintAssignable","",null],"type":"FOnEmitterQualityChanged"},{"name":"OnStereoLayerTypeChanged","flags":[null,"BlueprintAssignable","",null],"type":"FOnStereoLayerTypeChanged"},{"name":"OnHeadBobSettingChanged","flags":[null,"BlueprintAssignable","",null],"type":"FOnHeadBobSettingChanged"},{"name":"OnHUDWeatherEffectsChanged","flags":[null,"BlueprintAssignable","",null],"type":"FOnHUDWeatherEffectsChanged"},{"name":"EmitterQualityMode","flags":[null,"config","",null],"type":"TEnumAsByte<EEmitterQualitySetting>"},{"name":"bHudWeatherEffects","flags":[null,"config","",null],"type":"bool"},{"name":"VRMovementMode","flags":[null,"config","",null],"type":"TEnumAsByte<EVRMovementSetting>"},{"name":"VRTurnMode","flags":[null,"config","",null],"type":"TEnumAsByte<EVRTurnSetting>"},{"name":"AspectRatioConstraint","flags":[null,"config","",null],"type":"TEnumAsByte<EAspectRatioAxisConstraint>"},{"name":"PixelDensity","flags":[null,"config","",null],"type":"float"},{"name":"MouseSensitivity","flags":[null,"config","",null],"type":"float"},{"name":"FieldOfView","flags":[null,"config","",null],"type":"int"},{"name":"bLumenEnabled","flags":[null,"config","",null],"type":"bool"},{"name":"bHeadBob","flags":[null,"config","",null],"type":"bool"},{"name":"MasterVolume","flags":[null,"config","",null],"type":"float","description":"/** Master volume value "},{"name":"AmbientVolume","flags":[null,"config","",null],"type":"float","description":"/** Ambient volume value "},{"name":"DialogVolume","flags":[null,"config","",null],"type":"float","description":"/** Dialog volume value "},{"name":"EffectVolume","flags":[null,"config","",null],"type":"float","description":"/** Effect volume value "},{"name":"MusicVolume","flags":[null,"config","",null],"type":"float","description":"/** Music volume value "},{"name":"bDLSSEnabled","flags":[null,"config","",null],"type":"bool"},{"name":"DLSSMode","flags":[null,"config","",null],"type":"uint8"}],"functions":[{"name":"SetAudioCategoryVolume","flags":[],"args":[{"type":"EVolumeType","paramName":"VolumeCategory"},{"type":"float","paramName":"NewVolume"}],"returnType":"void"},{"name":"GetAllVolumeLevels","flags":[],"args":[{"type":"float&","paramName":"Master"},{"type":"float&","paramName":"Ambient"},{"type":"float&","paramName":"Effects"},{"type":"float&","paramName":"Dialog"},{"type":"float&","paramName":"Music"}],"returnType":"void"},{"name":"ApplyVolumeLevels","flags":[],"args":[{}],"returnType":"void"},{"name":"ApplyAspectRatioConstraint","flags":[],"args":[{}],"returnType":"void"},{"name":"ApplyFOVSettings","flags":[],"args":[{}],"returnType":"void"},{"name":"ApplyPixelDensity","flags":[],"args":[{}],"returnType":"void"}]},{"name":"*","properties":[{"name":"bAllowNewPlayerConnections","flags":[null,"","",null],"type":"bool","description":"/* Must be true for PostLogin to allow spawning and possession of new avatars. "}],"functions":[{"name":"ReportPlayerLogin","flags":[],"args":[{"type":"const","paramName":"FString&"},{"type":"const","paramName":"FString&"}],"returnType":"void","description":"The backend will run validation checks and will instigate spawning the users character if validation passes. Otherwise it will send a ban/kick message."},{"name":"UserBlockedAnotherUser","flags":[],"args":[{"type":"ADMT_PlayerControllerBase*","paramName":"_InstigatorController"},{"type":"const","paramName":"FString"},{"type":"const","paramName":"FString"}],"returnType":"void","description":"/* Replicate the block to the associated users. "},{"name":"InitWebSocket","flags":[],"args":[{}],"returnType":"void","description":"/*Attempt to open the websocket connection to the backend "},{"name":"PlayerBanned","flags":[],"args":[{"type":"FString&","paramName":"_PlayerName"}],"returnType":"void","description":"/* Bound to the websocket PlayerBanned event. Invokes action of searching for & kicking the player when a ban notification is received from the backend. "},{"name":"OnSocketConnectionLost","flags":[],"args":[{}],"returnType":"void","description":"/* Handle websocket connection failure. Flags the servers state to disallow new player connections but does not remove existing players. "},{"name":"OnSocketConnectionFutile","flags":[],"args":[{}],"returnType":"void","description":"is called when the Socket Managers reconnection attempts grace-period times out. "},{"name":"OnSocketConnected","flags":[],"args":[{}],"returnType":"void"},{"name":"KickPlayerByUsername","flags":[],"args":[{"type":"FString&","paramName":"Username"},{"type":"const","paramName":"FString&"}],"returnType":"bool","description":"/* search for a player controller by the username and invoke destroying it & its associated actors "},{"name":"KickPlayerByController","flags":[],"args":[{"type":"APlayerController*","paramName":"_controller"},{"type":"const","paramName":"FString&"}],"returnType":"bool","description":"/* Destroy the given controller and its associated actors "},{"name":"OnCharacterDataRetrieved","flags":[],"args":[{"type":"const","paramName":"FString&"}],"returnType":"void","description":"/* Handle what to do when character data is retrieved "},{"name":"FindControllerByUsername","flags":[],"args":[{"type":"const","paramName":"FString&"},{"type":"APlayerController*&","paramName":"_controller"}],"returnType":"bool"},{"name":"FindControllerBySessionToken","flags":[],"args":[{"type":"const","paramName":"FString&"},{"type":"APlayerController*","paramName":"_controller"}],"returnType":"bool"},{"name":"OnUserSessionTokenSet","flags":[],"args":[{"type":"ADMT_PlayerControllerBase*","paramName":"_controller"}],"returnType":"void"},{"name":"OnPlayerKickMessage","flags":[],"args":[{"type":"const","paramName":"FString&"}],"returnType":"void"}]},{"name":"*","properties":[{"name":"MovementMode","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Config","",null],"type":"uint8"},{"name":"TurnMode","flags":[null,"EditAnywhere"," BlueprintReadWrite"," Config","",null],"type":"uint8"},{"name":"OnSessionTokenSet","flags":[null,"","",null],"type":"FOnSessionTokenSet"},{"name":"Username","flags":[null,"","",null],"type":"FString"},{"name":"bIsLoggedIn","flags":[null,"","",null],"type":"bool"},{"name":"SessionToken","flags":[null,"","",null],"type":"FString","description":"The local client copy is saved here for persistence between server travel. The server copy is in the PController for simplified association.  "}],"functions":[{"name":"SetUsername","flags":[],"args":[{"type":"FString","paramName":"_username"}],"returnType":"void"},{"name":"GetUsername","flags":[],"args":[{}],"returnType":"FString"},{"name":"SetLoggedInState","flags":[],"args":[{"type":"bool","paramName":"_state"}],"returnType":"void"},{"name":"GetLoggedInState","flags":[],"args":[{}],"returnType":"bool"},{"name":"SendSessionToken","flags":[],"args":[{"type":"const","paramName":"FString&"},{"type":"const","paramName":"FString&"},{"type":"ADMT_PlayerControllerBase*","paramName":"_Controller"}],"returnType":"void","description":"validate login credentials on the backend.  Mismatch between User & token will result in destruction of the associated player controller. "}]},{"name":"*","properties":[],"functions":[{"name":"GetGraphicsSettings","flags":[],"args":[{"type":"int&","paramName":"Shadows"},{"type":"int&","paramName":"Textures"},{"type":"int&","paramName":"GI"},{"type":"int&","paramName":"Effects"},{"type":"int&","paramName":"Foliage"},{"type":"float&","paramName":"PixelDensity"},{"type":"FIntPoint&","paramName":"ScreenResolution"}],"returnType":"void"},{"name":"SetGraphicsSettings","flags":[],"args":[{"type":"const","paramName":"int"},{"type":"const","paramName":"int"},{"type":"const","paramName":"int"},{"type":"const","paramName":"int"},{"type":"const","paramName":"int"},{"type":"const","paramName":"float"},{"type":"const","paramName":"FIntPoint"}],"returnType":"void"},{"name":"SetInputModes","flags":[],"args":[{"type":"uint8","paramName":"_Locomotion"},{"type":"uint8","paramName":"_Turn"}],"returnType":"void"},{"name":"GetInputModes","flags":[],"args":[{"type":"uint8&","paramName":"_Locomotion"},{"type":"uint8&","paramName":"_Turn"}],"returnType":"void"},{"name":"SetVolumeLevels","flags":[],"args":[{"type":"const","paramName":"float"},{"type":"const","paramName":"float"},{"type":"const","paramName":"float"},{"type":"const","paramName":"float"},{"type":"const","paramName":"float"}],"returnType":"void","description":"/* Save and apply all volume levels to the settings save game instance. Saves settings to savegame transitively. "},{"name":"GetVolumeLevels","flags":[],"args":[{"type":"float&","paramName":"Master"},{"type":"float&","paramName":"Music"},{"type":"float&","paramName":"Effects"},{"type":"float&","paramName":"Ambience"},{"type":"float&","paramName":"Dialog"}],"returnType":"void","description":"/*Gets all volume channel levels from the save state. "}]},{"name":"*","properties":[],"functions":[{"name":"EnableLights","flags":[],"args":[{"type":"AActor*","paramName":"Target"},{"type":"UMaterialInterface*","paramName":"LightFunction"},{"type":"TArray<ULightComponent*>","paramName":"Lights"}],"returnType":"void"},{"name":"DisableLights","flags":[],"args":[{"type":"AActor*","paramName":"Target"},{"type":"TArray<ULightComponent*>","paramName":"Lights"}],"returnType":"void"},{"name":"SwitchLights","flags":[],"args":[{"type":"AActor*","paramName":"Target"},{"type":"UMaterialInterface*","paramName":"LightFunction"},{"type":"TArray<ULightComponent*>","paramName":"Lights"}],"returnType":"void"}]},{"name":"*","properties":[],"functions":[{"name":"CacheStats","flags":[],"args":[{}],"returnType":"void","description":"*"}]},{"name":"*","properties":[],"functions":[{"name":"IsInEditor","flags":[],"args":[{}],"returnType":"bool"},{"name":"PlayerIsInVR","flags":[],"args":[{}],"returnType":"bool"},{"name":"GetDataLogTableRow","flags":[],"args":[{"type":"const","paramName":"int"},{"type":"FDataLogs&","paramName":"OutRow"}],"returnType":"bool"},{"name":"StereoSafeLevelTransition","flags":[],"args":[{"type":"const","paramName":"FString&"},{"type":"const","paramName":"float"},{"type":"UTexture*","paramName":"LoadingScreenTexture"},{"type":"TSubclassOf<class","paramName":"UUserWidget>"}],"returnType":"bool"},{"name":"ReplaceUsernameSpecifierInString","flags":[],"args":[{"type":"const","paramName":"FString&"},{"type":"APlayerState*","paramName":"_PlayerState"},{"type":"FString&","paramName":"_OutString"}],"returnType":"bool","description":"/* Search for the username specifier in a string and replace it with the players Steam username. "},{"name":"getKeyForActionInput","flags":[],"args":[{"type":"const","paramName":"FString&"}],"returnType":"FString","description":"Defaults to keyboard if the input device is not explicitly supported. "},{"name":"getKeyForAxisInput","flags":[],"args":[{"type":"const","paramName":"FString&"},{"type":"const","paramName":"bool"}],"returnType":"FString","description":"Defaults to keyboard if the input device is not explicitly supported. "},{"name":"StripVRDeviceNames","flags":[],"args":[{"type":"const","paramName":"FString&"}],"returnType":"FString","description":"/* Strips any known VR device names from the given string. Mainly used for removing device names from input mappings for tooltips. "},{"name":"StripAxisLabels","flags":[],"args":[{"type":"const","paramName":"FString&"}],"returnType":"FString","description":"/* Strips any axis labels from the given string. Mainly used for removing unecessary labels from input mappings for tooltips. "},{"name":"StripButtonPressureLabels","flags":[],"args":[{"type":"const","paramName":"FString&"}],"returnType":"FString","description":"/* Strips any additional action labels such as \"press\" or \"touch\" from a string. Mainly used for removing unecessary labels from input mappings for tooltips. "},{"name":"FormatControllerHandLabels","flags":[],"args":[{"type":"const","paramName":"FString&"}],"returnType":"FString","description":"/* Expands any hand writing from  "},{"name":"HasFoundHiddenTesseract","flags":[],"args":[{"type":"const","paramName":"int"}],"returnType":"bool","description":"collected the hidden (red) tesseract at the given level number. "},{"name":"CollectedHiddenTesseract","flags":[],"args":[{"type":"const","paramName":"int"}],"returnType":"bool","description":"This only saves to the game save and does not notify steam.  use the return value to decide whether you need to update steam achievement "},{"name":"StripAllInputFormating","flags":[],"args":[{"type":"const","paramName":"FString&"}],"returnType":"FString"},{"name":"VirtuallyInvokeComboBoxDropdown","flags":[],"args":[{"type":"UComboBoxString*","paramName":"TargetWidget"}],"returnType":"void"},{"name":"IsTextGreaterThan","flags":[],"args":[{"type":"const","paramName":"FString"},{"type":"const","paramName":"FString"}],"returnType":"bool"},{"name":"IsTextLessThan","flags":[],"args":[{"type":"const","paramName":"FString"},{"type":"const","paramName":"FString"}],"returnType":"bool"},{"name":"ClearWidgetFocus","flags":[],"args":[{}],"returnType":"void"},{"name":"SetUserFocusDirect","flags":[],"args":[{}],"returnType":"void"},{"name":"CleanUpEmptyLevelFolders","flags":[],"args":[{}],"returnType":"void"}]},{"name":"*","properties":[],"functions":[{"name":"IsLevelUnlocked","flags":[],"args":[{"type":"const","paramName":"int"}],"returnType":"bool","description":"/* Returns whether or not the given level has been previously unlocked. Persistent across sessions. "},{"name":"GetHighestLevelUnlocked","flags":[],"args":[{}],"returnType":"int"},{"name":"UnlockLevel","flags":[],"args":[{"type":"const","paramName":"int"}],"returnType":"void","description":"/* Unlocks the given level number. Unlocking a level is permanent and is persistent across sessions. "},{"name":"SaveGameProgress","flags":[],"args":[{}],"returnType":"void","description":"/*Save game progress. This actually just invokes SaveConfigSettings as all saved states are currently in the same save slot for ease of management."},{"name":"ResetGameProgress","flags":[],"args":[{}],"returnType":"void","description":"This is probably only ever for the dev environment, but exists in case the option for a fresh restart is given to the player. "},{"name":"UnlockAllLevels","flags":[],"args":[{}],"returnType":"void"},{"name":"SaveConfigSettings","flags":[],"args":[{}],"returnType":"void","description":"/* Save settings varables out to the settings savegame file. "}]},{"name":"/* Progresses a tesseract. returns false if it has previously been collected. /* Returns true if all tesseracts have been collected *","properties":[{"name":"OnAnyKeyPressed","flags":[null,"BlueprintAssignable","",null],"type":"FOnAnyKeyPressed"}],"functions":[{"name":"OnKeyPressed","flags":[],"args":[{"type":"const","paramName":"FKey&"}],"returnType":"void"}]},{"name":"*","properties":[],"functions":[{"name":"SetUsername","flags":[],"args":[{"type":"const","paramName":"FString&"}],"returnType":"void","description":"/*Server set username "}]},{"name":"/* This is called on client proxies when this player states owner is blocked by the local client user. This Username is considered cannon as it is only confirmed and set by the server side code. This is here so that the server has easier access to usernames on demand. */* Trace for a teleport location. OutLocation is equal to the target location. implementation is ambiguous. expected to return true if traceable surface found.is destroyed or attachment is stolen. ","properties":[],"functions":[]},{"name":"*died from the damage given. *","properties":[{"name":"GamepadKey","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"FKey"},{"name":"Xbox","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"FText"},{"name":"DualShock","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"FText"},{"name":"Switch","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"FText"},{"name":"SuperNintendo","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"FText"}],"functions":[]},{"name":"*","properties":[{"name":"FirstRun","flags":[null,"","",null],"type":"int"}],"functions":[]},{"name":"*","properties":[{"name":"Mappings","flags":[null,"BlueprintReadOnly"," Category = \"Custom Input Mappings\"","",null],"type":"TArray<FEnhancedActionKeyMapping>"}],"functions":[]},{"name":"*","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[{"name":"ID","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"int"},{"name":"AlertText","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"FString"},{"name":"Title","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"FString"},{"name":"Transcript","flags":[null,"BlueprintReadWrite"," EditAnywhere"," meta = (MultiLine = \"true\"","","",["(MultiLine = \"true\"","BlueprintReadWrite, EditAnywhere, meta = "],null],"type":"FString"},{"name":"TranscriptColor","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"FSlateColor"},{"name":"TranscriptShowTime","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"float"},{"name":"fIsTrackStem","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"bool"},{"name":"StemType","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"TEnumAsByte<EStemType>"},{"name":"AlbumTrack","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"TEnumAsByte<EAlbumTrack>"},{"name":"NextLog","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"int"},{"name":"bAllowSkip","flags":[null,"BlueprintReadWrite"," EditAnywhere","",null],"type":"bool"}],"functions":[]},{"name":"*","properties":[],"functions":[{"name":"SimulateKeyPress","flags":[],"args":[{"type":"FKey","paramName":"_Key"}],"returnType":"void"}]},{"name":"*","properties":[],"functions":[]},{"name":"","properties":[],"functions":[]},{"name":"","properties":[{"name":"OnInputDeviceChanged","flags":[null,"BlueprintAssignable","",null],"type":"FOnInputDeviceChanged"}],"functions":[{"name":"GetNativeKeyForActiveGamepadModel","flags":[],"args":[{"type":"const","paramName":"FKey&"},{"type":"FText&","paramName":"NativeKey"}],"returnType":"bool"},{"name":"CheckKeyForDeviceChange","flags":[],"args":[{"type":"const","paramName":"FKey&"}],"returnType":"void"},{"name":"InputDeviceChanged","flags":[],"args":[{"type":"const","paramName":"FInputDevice"}],"returnType":"void"},{"name":"SaveCustomInputMappings","flags":[],"args":[{"type":"const","paramName":"TEnumAsByte<FInputDevice>"},{"type":"const","paramName":"TArray<FEnhancedActionKeyMapping>&"}],"returnType":"bool"},{"name":"InputDeviceEnumToString","flags":[],"args":[{"type":"const","paramName":"TEnumAsByte<FInputDevice>"}],"returnType":"FString"}]},{"name":"","properties":[],"functions":[]},{"name":"*","properties":[{"name":"OnStatsDownloaded","flags":[null,"BlueprintAssignable","",null],"type":"FOnStatsDownloaded"}],"functions":[{"name":"GetCachedSteamStats","flags":[],"args":[{}],"returnType":"void"},{"name":"QuerySteamStats","flags":[],"args":[{"type":"const","paramName":"TArray<FString>"}],"returnType":"void"}]},{"name":"*","properties":[],"functions":[{"name":"SimulateKeyPress","flags":[],"args":[{"type":"FKey","paramName":"_Key"}],"returnType":"void"}]},{"name":"*","properties":[],"functions":[]},{"name":"","properties":[{"name":"OnSocketConnectionEstablished","flags":[null,"","",null],"type":"FOnSocketConnectionEstablished"},{"name":"OnSocketConnectionLost","flags":[null,"","",null],"type":"FOnSocketConnectionLost"},{"name":"OnSocketConnectionFutility","flags":[null,"","",null],"type":"FOnSocketConnectionFutility"},{"name":"OnPlayerBanned","flags":[null,"","",null],"type":"FOnPlayerBanned"},{"name":"OnCharacterDataReceived","flags":[null,"","",null],"type":"FOnCharacterDataReceived"},{"name":"OnPlayerKickMessage","flags":[null,"","",null],"type":"FOnPlayerKickMessage"},{"name":"ServerURL","flags":[null,"Config","",null],"type":"FString","description":"/* This is parsed in from a config file. This file is not included in client builds. "}],"functions":[{"name":"OutMessage_LoginNotification","flags":[],"args":[{"type":"const","paramName":"FString&"},{"type":"const","paramName":"FString&"}],"returnType":"void","description":"*If a player is not banned, a message should be received with the character display information for the server to spawn the pawn. "},{"name":"OutMessage_LogEvent","flags":[],"args":[{"type":"const","paramName":"FString"}],"returnType":"void","description":"/* Send a LOG message over the socket "},{"name":"OutMessage_PlayerBanned","flags":[],"args":[{"type":"const","paramName":"FString"},{"type":"const","paramName":"FString&"}],"returnType":"void","description":"/* Report player ban to the backend "},{"name":"OutMessage_RankChanged","flags":[],"args":[{"type":"const","paramName":"FString"},{"type":"const","paramName":"int"}],"returnType":"void","description":"/* Report player rank change. Adjusted Rank should be the new rank to apply. "},{"name":"OutMessage_GetCharacterData","flags":[],"args":[{"type":"FString&","paramName":"SessionToken"},{"type":"FString","paramName":"&Username"}],"returnType":"void"}]},{"name":"/* Handles when the socket connection has opened. /* Handles connection errors. This is specifically when a connect attempt fails. See OnClosed for when an open connection has terminated. /* Low level message invoke.  Data is raw at this point and needs to be parsed to invoke any appropriate action. /* Invoked when the websocket closes for any reason. /*\tHandle Websocket connection attempt futility. Broadcasts OnConnectionFutility event. /* Ping the socket to assert connectivity. /* Handle server response to ping request /* Handle if socket doesn't respond to ping request. This is on a timer /* Respond to a ping query from the websocket. /* Timer handle for ping timeout /* timer handle for ping request ","properties":[],"functions":[]}]